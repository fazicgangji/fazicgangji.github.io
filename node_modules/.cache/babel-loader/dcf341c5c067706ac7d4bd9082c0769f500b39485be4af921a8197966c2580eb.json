{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __pow = Math.pow;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\n// src/carousel.tsx\nimport React5, { useEffect as useEffect6, useState as useState5, useRef as useRef6, useCallback as useCallback4 } from \"react\";\n\n// src/slide.tsx\nimport { useRef as useRef2, useEffect as useEffect2 } from \"react\";\n\n// src/hooks/use-slide-intersection-observer.ts\nimport { useEffect, useRef, useState } from \"react\";\nvar useSlideIntersectionObserver = (elementRef, rootRef, callback) => {\n  const [entry, setEntry] = useState();\n  const callbackRef = useRef(callback);\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    const node = elementRef == null ? void 0 : elementRef.current;\n    const root = rootRef == null ? void 0 : rootRef.current;\n    if (!window.IntersectionObserver || !node || !root) return;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry2 => {\n        setEntry(entry2);\n        callbackRef.current(entry2);\n      });\n    }, {\n      threshold: [0.05, 0.95],\n      root\n    });\n    observer.observe(node);\n    return () => observer.disconnect();\n  }, [elementRef, rootRef]);\n  return entry;\n};\n\n// src/slide.tsx\nimport { jsx } from \"react/jsx-runtime\";\nvar getSlideWidth = (count, wrapAround) => `${wrapAround ? 100 / (3 * count) : 100 / count}%`;\nvar getSlideStyles = (count, isCurrentSlide, isVisibleSlide, wrapAround, cellSpacing, animation, speed, zoomScale, adaptiveHeight, initializedAdaptiveHeight, slideWidth) => {\n  const width = slideWidth != null ? slideWidth : getSlideWidth(count, wrapAround);\n  const visibleSlideOpacity = isVisibleSlide ? 1 : 0;\n  const animationSpeed = animation === \"fade\" ? 200 : 500;\n  let height = \"auto\";\n  if (adaptiveHeight) {\n    if (initializedAdaptiveHeight) {\n      height = \"100%\";\n    } else if (isVisibleSlide) {\n      height = \"auto\";\n    } else {\n      height = \"0\";\n    }\n  }\n  return {\n    width,\n    height,\n    padding: `0 ${cellSpacing ? cellSpacing / 2 : 0}px`,\n    transition: animation ? `${speed || animationSpeed}ms ease 0s` : void 0,\n    transform: animation === \"zoom\" ? `scale(${isCurrentSlide && isVisibleSlide ? 1 : zoomScale || 0.85})` : void 0,\n    opacity: animation === \"fade\" ? visibleSlideOpacity : 1\n  };\n};\nvar generateIndex = (index, count, typeOfSlide) => {\n  if (typeOfSlide === \"prev-cloned\") {\n    return index - count;\n  }\n  if (typeOfSlide === \"next-cloned\") {\n    return index + count;\n  }\n  return index;\n};\nvar Slide = ({\n  count,\n  children,\n  index,\n  isCurrentSlide,\n  typeOfSlide,\n  wrapAround,\n  cellSpacing,\n  slideWidth,\n  animation,\n  speed,\n  zoomScale,\n  onVisibleSlideHeightChange,\n  adaptiveHeight,\n  initializedAdaptiveHeight,\n  updateIOEntry,\n  id,\n  carouselRef\n}) => {\n  var _a;\n  const customIndex = wrapAround ? generateIndex(index, count, typeOfSlide) : index;\n  const slideRef = useRef2(null);\n  const entry = useSlideIntersectionObserver(slideRef, carouselRef, entry2 => {\n    updateIOEntry(id, (entry2 == null ? void 0 : entry2.intersectionRatio) >= 0.95);\n  });\n  const isVisible = !!(entry == null ? void 0 : entry.isIntersecting);\n  const isFullyVisible = ((_a = entry == null ? void 0 : entry.intersectionRatio) != null ? _a : 1) >= 0.95;\n  const prevIsVisibleRef = useRef2(false);\n  useEffect2(() => {\n    var _a2;\n    const node = slideRef.current;\n    if (node) {\n      const slideHeight = (_a2 = node.getBoundingClientRect()) == null ? void 0 : _a2.height;\n      const prevIsVisible = prevIsVisibleRef.current;\n      if (isVisible && !prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, slideHeight);\n      } else if (!isVisible && prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, null);\n      }\n      prevIsVisibleRef.current = isVisible;\n    }\n  }, [customIndex, isVisible, onVisibleSlideHeightChange]);\n  const currentSlideClass = isCurrentSlide && isFullyVisible ? \" slide-current\" : \"\";\n  return /* @__PURE__ */jsx(\"div\", __spreadProps(__spreadValues({\n    ref: slideRef\n  }, {\n    inert: isFullyVisible ? void 0 : \"true\"\n  }), {\n    className: `slide${currentSlideClass}${typeOfSlide ? ` ${typeOfSlide}` : \"\"}${isFullyVisible ? \" slide-visible\" : \"\"}`,\n    style: getSlideStyles(count, isCurrentSlide, isFullyVisible, wrapAround, cellSpacing, animation, speed, zoomScale, adaptiveHeight, initializedAdaptiveHeight, slideWidth),\n    children\n  }));\n};\nvar slide_default = Slide;\n\n// src/announce-slide.tsx\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar styles = {\n  position: \"absolute\",\n  width: \"1px\",\n  height: \"1px\",\n  overflow: \"hidden\",\n  padding: 0,\n  margin: \"-1px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  whiteSpace: \"nowrap\",\n  border: 0\n};\nvar AnnounceSlide = ({\n  message,\n  ariaLive = \"polite\"\n}) => /* @__PURE__ */jsx2(\"div\", {\n  \"aria-live\": ariaLive,\n  \"aria-atomic\": \"true\",\n  style: styles,\n  tabIndex: -1,\n  children: message\n});\nvar defaultRenderAnnounceSlideMessage = ({\n  currentSlide,\n  count\n}) => `Slide ${currentSlide + 1} of ${count}`;\nvar announce_slide_default = AnnounceSlide;\n\n// src/slider-list.tsx\nimport React3, { useEffect as useEffect4 } from \"react\";\n\n// src/default-controls.tsx\nimport { useCallback } from \"react\";\n\n// src/types.ts\nvar Alignment = /* @__PURE__ */(Alignment2 => {\n  Alignment2[\"Center\"] = \"center\";\n  Alignment2[\"Right\"] = \"right\";\n  Alignment2[\"Left\"] = \"left\";\n  return Alignment2;\n})(Alignment || {});\nvar Directions = /* @__PURE__ */(Directions2 => {\n  Directions2[\"Next\"] = \"next\";\n  Directions2[\"Prev\"] = \"prev\";\n  Directions2[\"Up\"] = \"up\";\n  Directions2[\"Down\"] = \"down\";\n  return Directions2;\n})(Directions || {});\nvar Positions = /* @__PURE__ */(Positions2 => {\n  Positions2[\"TopLeft\"] = \"TopLeft\";\n  Positions2[\"TopCenter\"] = \"TopCenter\";\n  Positions2[\"TopRight\"] = \"TopRight\";\n  Positions2[\"CenterLeft\"] = \"CenterLeft\";\n  Positions2[\"CenterCenter\"] = \"CenterCenter\";\n  Positions2[\"CenterRight\"] = \"CenterRight\";\n  Positions2[\"BottomLeft\"] = \"BottomLeft\";\n  Positions2[\"BottomCenter\"] = \"BottomCenter\";\n  Positions2[\"BottomRight\"] = \"BottomRight\";\n  return Positions2;\n})(Positions || {});\nvar ScrollMode = /* @__PURE__ */(ScrollMode2 => {\n  ScrollMode2[\"page\"] = \"page\";\n  ScrollMode2[\"remainder\"] = \"remainder\";\n  return ScrollMode2;\n})(ScrollMode || {});\n\n// src/utils.ts\nvar getNextMoveIndex = (scrollMode, wrapAround, currentSlide, slideCount, slidesToScroll, slidesToShow, cellAlign) => {\n  if (wrapAround) {\n    return currentSlide + slidesToScroll;\n  }\n  if (currentSlide >= slideCount - 1 || cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n    return currentSlide;\n  }\n  if (scrollMode === \"remainder\" /* remainder */ && cellAlign === \"left\") {\n    return Math.min(currentSlide + slidesToScroll, slideCount - slidesToShow);\n  }\n  return Math.min(currentSlide + slidesToScroll, slideCount - 1);\n};\nvar getPrevMoveIndex = (scrollMode, wrapAround, currentSlide, slidesToScroll, slidesToShow, cellAlign) => {\n  if (wrapAround) {\n    return currentSlide - slidesToScroll;\n  }\n  if (currentSlide <= 0 || cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n    return currentSlide;\n  }\n  if (scrollMode === \"remainder\" /* remainder */ && cellAlign === \"right\") {\n    return Math.max(currentSlide - slidesToScroll, slidesToShow - 1);\n  }\n  return Math.max(currentSlide - slidesToScroll, 0);\n};\nvar getDefaultSlideIndex = (slideIndex, slideCount, slidesToShow, slidesToScroll, cellAlign, autoplayReverse, scrollMode) => {\n  if (slideIndex !== void 0) {\n    return slideIndex;\n  }\n  const dotIndexes = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, false, cellAlign);\n  return autoplayReverse ? dotIndexes[dotIndexes.length - 1] : dotIndexes[0];\n};\nvar getBoundedIndex = (rawIndex, slideCount) => {\n  return (rawIndex % slideCount + slideCount) % slideCount;\n};\n\n// src/default-controls.tsx\nimport { jsx as jsx3 } from \"react/jsx-runtime\";\nvar defaultButtonStyles = disabled => ({\n  border: 0,\n  background: \"rgba(0,0,0,0.4)\",\n  color: \"white\",\n  padding: 10,\n  textTransform: \"uppercase\",\n  opacity: disabled ? 0.3 : 1,\n  cursor: disabled ? \"not-allowed\" : \"pointer\"\n});\nvar prevButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slidesToShow,\n  wrapAround\n}) => {\n  if (wrapAround) {\n    return false;\n  }\n  if (currentSlide === 0) {\n    return true;\n  }\n  if (cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n    return true;\n  }\n  return false;\n};\nvar PreviousButton = ({\n  previousSlide,\n  defaultControlsConfig: {\n    prevButtonClassName,\n    prevButtonStyle = {},\n    prevButtonText,\n    prevButtonOnClick\n  },\n  onUserNavigation,\n  previousDisabled: disabled\n}) => {\n  const handleClick = event => {\n    prevButtonOnClick == null ? void 0 : prevButtonOnClick(event);\n    if (event.defaultPrevented) return;\n    onUserNavigation(event);\n    event.preventDefault();\n    previousSlide();\n  };\n  return /* @__PURE__ */jsx3(\"button\", {\n    className: prevButtonClassName,\n    style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), prevButtonStyle),\n    disabled,\n    onClick: handleClick,\n    \"aria-label\": \"previous\",\n    type: \"button\",\n    children: prevButtonText || \"Prev\"\n  });\n};\nvar nextButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slideCount,\n  slidesToShow,\n  wrapAround\n}) => {\n  if (wrapAround) {\n    return false;\n  }\n  if (currentSlide >= slideCount - 1) {\n    return true;\n  }\n  if (cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n    return true;\n  }\n  return false;\n};\nvar NextButton = ({\n  nextSlide,\n  defaultControlsConfig: {\n    nextButtonClassName,\n    nextButtonStyle = {},\n    nextButtonText,\n    nextButtonOnClick\n  },\n  nextDisabled: disabled,\n  onUserNavigation\n}) => {\n  const handleClick = event => {\n    nextButtonOnClick == null ? void 0 : nextButtonOnClick(event);\n    if (event.defaultPrevented) return;\n    onUserNavigation(event);\n    event.preventDefault();\n    nextSlide();\n  };\n  return /* @__PURE__ */jsx3(\"button\", {\n    className: nextButtonClassName,\n    style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), nextButtonStyle),\n    disabled,\n    onClick: handleClick,\n    \"aria-label\": \"next\",\n    type: \"button\",\n    children: nextButtonText || \"Next\"\n  });\n};\nvar getDotIndexes = (slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign) => {\n  const dotIndexes = [];\n  const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n  if (wrapAround) {\n    for (let i = 0; i < slideCount; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n    return dotIndexes;\n  }\n  if (cellAlign === \"center\") {\n    for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n    if (slideCount > 0) {\n      dotIndexes.push(slideCount - 1);\n    }\n    return dotIndexes;\n  }\n  if (cellAlign === \"left\") {\n    if (slidesToShow >= slideCount) {\n      return [0];\n    }\n    const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n    for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n    if (scrollMode === \"remainder\" /* remainder */) {\n      dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n    } else {\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n    }\n    return dotIndexes;\n  }\n  if (cellAlign === \"right\") {\n    if (slidesToShow >= slideCount) {\n      return [slideCount - 1];\n    }\n    const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n    if (scrollMode === \"remainder\" /* remainder */) {\n      for (let i = firstPossibleIndexWithoutWhitespace; i < slideCount - 1; i += scrollSlides) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(slideCount - 1);\n    } else {\n      for (let i = slideCount - 1; i > firstPossibleIndexWithoutWhitespace; i -= scrollSlides) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n      dotIndexes.reverse();\n    }\n    return dotIndexes;\n  }\n  return dotIndexes;\n};\nvar PagingDots = ({\n  pagingDotsIndices,\n  defaultControlsConfig: {\n    pagingDotsContainerClassName,\n    pagingDotsClassName,\n    pagingDotsStyle = {},\n    pagingDotsOnClick\n  },\n  currentSlide,\n  onUserNavigation,\n  slideCount,\n  goToSlide\n}) => {\n  const listStyles = {\n    position: \"relative\",\n    top: -10,\n    display: \"flex\",\n    margin: 0,\n    padding: 0,\n    listStyleType: \"none\"\n  };\n  const getButtonStyles = useCallback(active => ({\n    cursor: \"pointer\",\n    opacity: active ? 1 : 0.5,\n    background: \"transparent\",\n    border: \"none\",\n    fill: \"black\"\n  }), []);\n  const currentSlideBounded = getBoundedIndex(currentSlide, slideCount);\n  return /* @__PURE__ */jsx3(\"ul\", {\n    className: pagingDotsContainerClassName,\n    style: listStyles,\n    children: pagingDotsIndices.map((slideIndex, i) => {\n      const isActive = currentSlideBounded === slideIndex ||\n      // sets navigation dots active if the current slide falls in the current index range\n      currentSlideBounded < slideIndex && (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]);\n      return /* @__PURE__ */jsx3(\"li\", {\n        className: isActive ? \"paging-item active\" : \"paging-item\",\n        children: /* @__PURE__ */jsx3(\"button\", {\n          className: pagingDotsClassName,\n          type: \"button\",\n          style: __spreadValues(__spreadValues({}, getButtonStyles(isActive)), pagingDotsStyle),\n          onClick: event => {\n            pagingDotsOnClick == null ? void 0 : pagingDotsOnClick(event);\n            if (event.defaultPrevented) return;\n            onUserNavigation(event);\n            goToSlide(slideIndex);\n          },\n          \"aria-label\": `slide ${slideIndex + 1} bullet`,\n          \"aria-selected\": isActive,\n          children: /* @__PURE__ */jsx3(\"svg\", {\n            className: \"paging-dot\",\n            width: \"6\",\n            height: \"6\",\n            \"aria-hidden\": \"true\",\n            focusable: \"false\",\n            viewBox: \"0 0 6 6\",\n            children: /* @__PURE__ */jsx3(\"circle\", {\n              cx: \"3\",\n              cy: \"3\",\n              r: \"3\"\n            })\n          })\n        })\n      }, slideIndex);\n    })\n  });\n};\n\n// src/hooks/use-tween.ts\nimport { useEffect as useEffect3, useState as useState2, useRef as useRef3 } from \"react\";\nvar useTween = (durationMs, easingFunction, navigationNum, shouldInterrupt) => {\n  const [normalizedTimeRaw, setNormalizedTime] = useState2(1);\n  const startTime = useRef3(Date.now());\n  const rAF = useRef3();\n  const isFirstRender = useRef3(true);\n  const lastNavigationNum = useRef3(null);\n  const normalizedTime = lastNavigationNum.current === null || lastNavigationNum.current === navigationNum || shouldInterrupt ? normalizedTimeRaw : 0;\n  useEffect3(() => {\n    lastNavigationNum.current = navigationNum;\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (shouldInterrupt) {\n      return;\n    }\n    startTime.current = Date.now();\n    setNormalizedTime(0);\n    const tick = () => {\n      rAF.current = requestAnimationFrame(() => {\n        const currentTime = Date.now();\n        const normalizedTime2 = Math.min(1, (currentTime - startTime.current) / durationMs);\n        setNormalizedTime(normalizedTime2);\n        if (normalizedTime2 < 1) {\n          tick();\n        } else {\n          rAF.current = void 0;\n        }\n      });\n    };\n    tick();\n    return () => {\n      if (rAF.current !== void 0) {\n        cancelAnimationFrame(rAF.current);\n        setNormalizedTime(1);\n      }\n    };\n  }, [navigationNum, durationMs, shouldInterrupt]);\n  return {\n    isAnimating: normalizedTime !== 1,\n    value: easingFunction(normalizedTime)\n  };\n};\n\n// src/slider-list.tsx\nimport { jsx as jsx4 } from \"react/jsx-runtime\";\nvar getPercentOffsetForSlide = (currentSlide, slideCount, slidesToShow, cellAlign, wrapAround) => {\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n  const singleSlidePercentOfWhole = 100 / renderedSlideCount;\n  let slide0Offset = wrapAround ? -100 / 3 : 0;\n  if (cellAlign === \"right\" && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    slide0Offset += singleSlidePercentOfWhole * excessSlides;\n  }\n  if (cellAlign === \"center\" && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    const excessLeftSlides = excessSlides / 2;\n    slide0Offset += singleSlidePercentOfWhole * excessLeftSlides;\n  }\n  const currentSlideOffsetFrom0 = 100 / renderedSlideCount * currentSlide;\n  return slide0Offset - currentSlideOffsetFrom0;\n};\nvar SliderList = React3.forwardRef(({\n  animation,\n  animationDistance,\n  cellAlign,\n  children,\n  currentSlide,\n  disableAnimation,\n  disableEdgeSwiping,\n  draggedOffset,\n  easing,\n  edgeEasing,\n  isDragging,\n  scrollMode,\n  slideCount,\n  slidesToScroll,\n  slidesToShow,\n  speed,\n  wrapAround,\n  slideWidth,\n  setIsAnimating\n}, forwardedRef) => {\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n  const listVisibleWidth = slideWidth ? `calc(${slideWidth} * ${renderedSlideCount})` : `${renderedSlideCount * 100 / slidesToShow}%`;\n  const percentOffsetForSlideProps = [slideCount, slidesToShow, cellAlign, wrapAround];\n  const dotIndexes = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign);\n  let clampedDraggedOffset = `${draggedOffset}px`;\n  if (isDragging && disableEdgeSwiping && !wrapAround) {\n    const clampOffsets = [dotIndexes[0], dotIndexes[dotIndexes.length - 1]].map(index => getPercentOffsetForSlide(index, ...percentOffsetForSlideProps));\n    clampedDraggedOffset = `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)`;\n  }\n  const slideBasedOffset = getPercentOffsetForSlide(currentSlide, ...percentOffsetForSlideProps);\n  const isEdgeEasing = !disableEdgeSwiping && !wrapAround && (currentSlide === dotIndexes[0] && animationDistance < 0 || currentSlide === dotIndexes[dotIndexes.length - 1] && animationDistance > 0);\n  const {\n    value: transition,\n    isAnimating\n  } = useTween(speed, !isEdgeEasing ? easing : edgeEasing,\n  // animationDistance is assumed to be unique enough that it can be used to\n  // detect when a new animation should start. This is used in addition to\n  // currentSlide because some animations, such as those with edgeEasing, do\n  // not occur due to a change in value of currentSlide\n  currentSlide + animationDistance, isDragging || disableAnimation || animation === \"fade\");\n  let positioning;\n  if (isDragging || slideBasedOffset !== 0 || isAnimating) {\n    if (isDragging) {\n      positioning = `translateX(${clampedDraggedOffset})`;\n    } else {\n      const transitionOffset = isAnimating ? (1 - transition) * animationDistance : 0;\n      positioning = `translateX(calc(${slideBasedOffset}% - ${transitionOffset}px))`;\n    }\n  }\n  useEffect4(() => {\n    setIsAnimating(isAnimating);\n  }, [isAnimating, setIsAnimating]);\n  return /* @__PURE__ */jsx4(\"div\", {\n    ref: forwardedRef,\n    className: \"slider-list\",\n    style: {\n      width: listVisibleWidth,\n      textAlign: \"left\",\n      userSelect: \"auto\",\n      transform: positioning,\n      display: \"flex\"\n    },\n    children\n  });\n});\nSliderList.displayName = \"SliderList\";\n\n// src/controls.tsx\nimport { Fragment } from \"react\";\n\n// src/control-styles.ts\nvar commonStyles = {\n  position: \"absolute\",\n  display: \"flex\",\n  zIndex: 1,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0\n};\nvar getControlContainerFlexStyles = pos => {\n  let alignItems;\n  switch (pos) {\n    case \"TopLeft\" /* TopLeft */:\n    case \"TopCenter\" /* TopCenter */:\n    case \"TopRight\" /* TopRight */:\n      alignItems = \"flex-start\";\n      break;\n    case \"CenterLeft\" /* CenterLeft */:\n    case \"CenterCenter\" /* CenterCenter */:\n    case \"CenterRight\" /* CenterRight */:\n      alignItems = \"center\";\n      break;\n    case \"BottomLeft\" /* BottomLeft */:\n    case \"BottomCenter\" /* BottomCenter */:\n    case \"BottomRight\" /* BottomRight */:\n      alignItems = \"flex-end\";\n      break;\n  }\n  let justifyContent;\n  switch (pos) {\n    case \"TopLeft\" /* TopLeft */:\n    case \"CenterLeft\" /* CenterLeft */:\n    case \"BottomLeft\" /* BottomLeft */:\n      justifyContent = \"flex-start\";\n      break;\n    case \"TopCenter\" /* TopCenter */:\n    case \"CenterCenter\" /* CenterCenter */:\n    case \"BottomCenter\" /* BottomCenter */:\n      justifyContent = \"center\";\n      break;\n    case \"TopRight\" /* TopRight */:\n    case \"CenterRight\" /* CenterRight */:\n    case \"BottomRight\" /* BottomRight */:\n      justifyContent = \"flex-end\";\n      break;\n  }\n  return {\n    alignItems,\n    justifyContent\n  };\n};\nvar getControlContainerStyles = pos => {\n  return __spreadValues(__spreadValues({}, getControlContainerFlexStyles(pos)), commonStyles);\n};\n\n// src/controls.tsx\nimport { jsx as jsx5 } from \"react/jsx-runtime\";\nvar controlsMap = [{\n  funcName: \"renderTopLeftControls\",\n  key: \"TopLeft\" /* TopLeft */\n}, {\n  funcName: \"renderTopCenterControls\",\n  key: \"TopCenter\" /* TopCenter */\n}, {\n  funcName: \"renderTopRightControls\",\n  key: \"TopRight\" /* TopRight */\n}, {\n  funcName: \"renderCenterLeftControls\",\n  key: \"CenterLeft\" /* CenterLeft */\n}, {\n  funcName: \"renderCenterCenterControls\",\n  key: \"CenterCenter\" /* CenterCenter */\n}, {\n  funcName: \"renderCenterRightControls\",\n  key: \"CenterRight\" /* CenterRight */\n}, {\n  funcName: \"renderBottomLeftControls\",\n  key: \"BottomLeft\" /* BottomLeft */\n}, {\n  funcName: \"renderBottomCenterControls\",\n  key: \"BottomCenter\" /* BottomCenter */\n}, {\n  funcName: \"renderBottomRightControls\",\n  key: \"BottomRight\" /* BottomRight */\n}];\n\nvar renderControls = (props, slideCount, currentSlide, goToSlide, nextSlide, prevSlide, slidesToScroll) => {\n  if (props.withoutControls) {\n    return null;\n  }\n  const disableCheckProps = __spreadProps(__spreadValues({}, props), {\n    currentSlide,\n    slideCount\n  });\n  const nextDisabled = nextButtonDisabled(disableCheckProps);\n  const previousDisabled = prevButtonDisabled(disableCheckProps);\n  const pagingDotsIndices = getDotIndexes(slideCount, slidesToScroll, props.scrollMode, props.slidesToShow, props.wrapAround, props.cellAlign);\n  return controlsMap.map(control => {\n    var _a;\n    if (!props[control.funcName] || typeof props[control.funcName] !== \"function\") {\n      return /* @__PURE__ */jsx5(Fragment, {}, control.funcName);\n    }\n    return /* @__PURE__ */jsx5(\"div\", {\n      style: __spreadProps(__spreadValues({}, getControlContainerStyles(control.key)), {\n        pointerEvents: \"none\"\n      }),\n      children: /* @__PURE__ */jsx5(\"div\", {\n        className: [`slider-control-${control.key.toLowerCase()}`, props.defaultControlsConfig.containerClassName || \"\"].join(\" \").trim(),\n        style: {\n          pointerEvents: \"auto\"\n        },\n        children: (_a = props[control.funcName]) == null ? void 0 : _a.call(props, {\n          cellAlign: props.cellAlign,\n          cellSpacing: props.cellSpacing,\n          currentSlide,\n          defaultControlsConfig: props.defaultControlsConfig || {},\n          pagingDotsIndices,\n          goToSlide,\n          nextDisabled,\n          nextSlide,\n          onUserNavigation: props.onUserNavigation,\n          previousDisabled,\n          previousSlide: prevSlide,\n          scrollMode: props.scrollMode,\n          slideCount,\n          slidesToScroll,\n          slidesToShow: props.slidesToShow || 1,\n          vertical: props.vertical,\n          wrapAround: props.wrapAround\n        })\n      })\n    }, control.funcName);\n  });\n};\nvar controls_default = renderControls;\n\n// src/default-carousel-props.tsx\nimport { Fragment as Fragment2, jsx as jsx6 } from \"react/jsx-runtime\";\nvar easeOut = t => __pow(t - 1, 3) + 1;\nvar defaultProps = {\n  adaptiveHeight: false,\n  adaptiveHeightAnimation: true,\n  afterSlide: () => {},\n  autoplay: false,\n  autoplayInterval: 3e3,\n  autoplayReverse: false,\n  beforeSlide: () => {},\n  cellAlign: \"left\",\n  cellSpacing: 0,\n  defaultControlsConfig: {},\n  disableAnimation: false,\n  disableEdgeSwiping: false,\n  dragging: true,\n  dragThreshold: 0.5,\n  easing: easeOut,\n  edgeEasing: easeOut,\n  enableKeyboardControls: false,\n  frameAriaLabel: \"carousel-slider\",\n  keyCodeConfig: {\n    nextSlide: [39, 68, 38, 87],\n    previousSlide: [37, 65, 40, 83],\n    firstSlide: [81],\n    lastSlide: [69],\n    pause: [32]\n  },\n  onDragStart: () => {},\n  onDrag: () => {},\n  onDragEnd: () => {},\n  onUserNavigation: () => {},\n  pauseOnHover: true,\n  renderAnnounceSlideMessage: defaultRenderAnnounceSlideMessage,\n  renderBottomCenterControls: props => /* @__PURE__ */jsx6(PagingDots, __spreadValues({}, props)),\n  renderCenterLeftControls: props => /* @__PURE__ */jsx6(PreviousButton, __spreadValues({}, props)),\n  renderCenterRightControls: props => /* @__PURE__ */jsx6(NextButton, __spreadValues({}, props)),\n  scrollMode: \"page\" /* page */,\n  slidesToScroll: 1,\n  slidesToShow: 1,\n  speed: 500,\n  style: {},\n  swiping: true,\n  vertical: false,\n  withoutControls: false,\n  wrapAround: false,\n  children: /* @__PURE__ */jsx6(Fragment2, {})\n};\nvar default_carousel_props_default = defaultProps;\n\n// src/hooks/use-frame-height.ts\nimport { useCallback as useCallback3, useMemo, useState as useState4 } from \"react\";\n\n// src/hooks/use-state-with-ref.ts\nimport { useCallback as useCallback2, useRef as useRef4, useState as useState3 } from \"react\";\nvar useStateWithRef = initialState => {\n  const [value, setValue] = useState3(initialState);\n  const valueRef = useRef4(initialState);\n  const setValueAndRef = useCallback2(newValue => {\n    valueRef.current = newValue;\n    setValue(newValue);\n  }, []);\n  return [value, setValueAndRef, valueRef];\n};\n\n// src/hooks/use-frame-height.ts\nvar useFrameHeight = (adaptiveHeight, slidesToShow, slideCount) => {\n  const [visibleHeights, setVisibleHeights, visibleHeightsRef] = useStateWithRef([]);\n  const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] = useState4(false);\n  const handleVisibleSlideHeightChange = useCallback3((slideIndex, height) => {\n    const latestVisibleHeights = visibleHeightsRef.current;\n    let newVisibleHeights;\n    if (height === null) {\n      newVisibleHeights = latestVisibleHeights.filter(slideHeight => slideHeight.slideIndex !== slideIndex);\n    } else {\n      newVisibleHeights = [...latestVisibleHeights, {\n        slideIndex,\n        height\n      }];\n    }\n    setVisibleHeights(newVisibleHeights);\n    if (newVisibleHeights.length >= Math.min(slideCount, Math.ceil(slidesToShow))) {\n      setInitializedAdaptiveHeight(true);\n    }\n  }, [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]);\n  const frameHeight = useMemo(() => {\n    if (adaptiveHeight) {\n      if (!initializedAdaptiveHeight) {\n        return \"auto\";\n      }\n      const maxHeight = Math.max(0, ...visibleHeights.map(height => height.height));\n      return `${maxHeight}px`;\n    } else {\n      return \"auto\";\n    }\n  }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n  return {\n    handleVisibleSlideHeightChange,\n    frameHeight,\n    initializedAdaptiveHeight\n  };\n};\n\n// src/hooks/use-forward-ref.ts\nimport { useEffect as useEffect5, useRef as useRef5 } from \"react\";\nvar useForwardRef = ref => {\n  const targetRef = useRef5(null);\n  useEffect5(() => {\n    if (!ref) return;\n    if (typeof ref === \"function\") {\n      ref(targetRef.current);\n    } else {\n      ref.current = targetRef.current;\n    }\n  }, [ref]);\n  return targetRef;\n};\n\n// src/carousel.tsx\nimport { jsx as jsx7, jsxs } from \"react/jsx-runtime\";\nvar Carousel = React5.forwardRef((rawProps, ref) => {\n  const props = rawProps;\n  const {\n    adaptiveHeight,\n    adaptiveHeightAnimation,\n    afterSlide,\n    animation,\n    autoplay,\n    autoplayInterval,\n    autoplayReverse,\n    beforeSlide,\n    cellAlign: propsCellAlign,\n    cellSpacing,\n    children,\n    className,\n    disableAnimation,\n    dragging: desktopDraggingEnabled,\n    dragThreshold: propsDragThreshold,\n    enableKeyboardControls,\n    frameAriaLabel,\n    keyCodeConfig,\n    onDrag,\n    onDragEnd,\n    onDragStart,\n    onUserNavigation,\n    pauseOnHover,\n    renderAnnounceSlideMessage,\n    scrollMode: propsScrollMode,\n    slideIndex,\n    slidesToScroll: propsSlidesToScroll,\n    slidesToShow: propsSlidesToShow,\n    slideWidth,\n    speed,\n    style,\n    swiping: mobileDraggingEnabled,\n    wrapAround,\n    zoomScale\n  } = props;\n  const filteredSlides = React5.Children.toArray(children).filter(Boolean);\n  const slideCount = filteredSlides.length;\n  const cellAlign = slideWidth || propsSlidesToScroll === \"auto\" ? \"left\" : propsCellAlign;\n  const scrollMode = propsSlidesToScroll === \"auto\" ? \"remainder\" /* remainder */ : propsScrollMode;\n  const [slideIOEntries, setSlideIOEntries] = useState5( /* @__PURE__ */new Map());\n  const visibleCount = Array.from(slideIOEntries).filter(([, visible]) => visible).length;\n  const [constantVisibleCount, setConstantVisibleCount] = useState5(visibleCount);\n  const slidesToShow = slideWidth ? constantVisibleCount : propsSlidesToShow;\n  const slidesToScroll = animation === \"fade\" ? slidesToShow : propsSlidesToScroll === \"auto\" ? Math.max(constantVisibleCount, 1) : propsSlidesToScroll;\n  const [currentSlide, setCurrentSlide] = useState5(() => getDefaultSlideIndex(slideIndex, slideCount, slidesToShow, slidesToScroll, cellAlign, autoplayReverse, scrollMode));\n  const [pause, setPause] = useState5(false);\n  const [isDragging, setIsDragging] = useState5(false);\n  const [dragDistance, setDragDistance] = useState5(0);\n  const [animationDistance, setAnimationDistance] = useState5(0);\n  const [isAnimating, setIsAnimating] = useState5(false);\n  const updateSlideIOEntry = useCallback4((id, isFullyVisible) => {\n    if (!!slideIOEntries.get(id) === isFullyVisible) return;\n    setSlideIOEntries(prev => {\n      const newMap = new Map(prev);\n      newMap.set(id, isFullyVisible);\n      return newMap;\n    });\n  }, [slideIOEntries]);\n  const prevDragged = useRef6(false);\n  useEffect6(() => {\n    if (isDragging) prevDragged.current = true;\n    if (!(isDragging || isAnimating)) {\n      if (!prevDragged.current) setConstantVisibleCount(visibleCount);\n      prevDragged.current = false;\n    }\n  }, [isAnimating, isDragging, visibleCount]);\n  const prevXPosition = useRef6(null);\n  const preDragOffset = useRef6(0);\n  const sliderListRef = useRef6(null);\n  const defaultCarouselRef = useRef6(null);\n  const autoplayTimeout = useRef6();\n  const autoplayLastTriggeredRef = useRef6(null);\n  const isMounted = useRef6(true);\n  const setSliderListRef = useCallback4(node => {\n    if (node) {\n      node.querySelectorAll(\".slider-list img\").forEach(el => el.setAttribute(\"draggable\", \"false\"));\n    }\n    sliderListRef.current = node;\n  }, []);\n  useEffect6(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const forwardedRef = useForwardRef(ref);\n  const carouselRef = forwardedRef || defaultCarouselRef;\n  const goToSlide = useCallback4(targetSlideUnbounded => {\n    if (!sliderListRef.current || !carouselRef.current) return;\n    const targetSlideBounded = getBoundedIndex(targetSlideUnbounded, slideCount);\n    const slideChanged = targetSlideUnbounded !== currentSlide;\n    slideChanged && beforeSlide(currentSlide, targetSlideBounded);\n    const currentOffset = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n    const sliderWidth = sliderListRef.current.offsetWidth;\n    let targetOffset = getPercentOffsetForSlide(targetSlideBounded, slideCount, slidesToShow, cellAlign, wrapAround) / 100 * sliderWidth;\n    if (wrapAround) {\n      const slideSetWidth = sliderWidth / 3;\n      if (targetSlideUnbounded < 0) {\n        targetOffset += slideSetWidth;\n      }\n      if (targetSlideUnbounded >= slideCount) {\n        targetOffset -= slideSetWidth;\n      }\n    }\n    setAnimationDistance(targetOffset - currentOffset);\n    if (slideChanged) {\n      setCurrentSlide(targetSlideBounded);\n      const msToEndOfAnimation = !disableAnimation ? speed || 500 : 40;\n      setTimeout(() => {\n        if (!isMounted.current) return;\n        afterSlide(targetSlideBounded);\n      }, msToEndOfAnimation);\n    }\n  }, [afterSlide, beforeSlide, carouselRef, cellAlign, currentSlide, disableAnimation, speed, slideCount, slidesToShow, wrapAround]);\n  const nextSlide = useCallback4(() => {\n    const nextSlideIndex = getNextMoveIndex(scrollMode, wrapAround, currentSlide, slideCount, slidesToScroll, slidesToShow, cellAlign);\n    if (currentSlide !== nextSlideIndex) {\n      goToSlide(nextSlideIndex);\n    }\n  }, [cellAlign, currentSlide, goToSlide, slidesToScroll, scrollMode, slideCount, slidesToShow, wrapAround]);\n  const prevSlide = useCallback4(() => {\n    const prevSlideIndex = getPrevMoveIndex(scrollMode, wrapAround, currentSlide, slidesToScroll, slidesToShow, cellAlign);\n    if (currentSlide !== prevSlideIndex) {\n      goToSlide(prevSlideIndex);\n    }\n  }, [cellAlign, currentSlide, goToSlide, slidesToScroll, scrollMode, slidesToShow, wrapAround]);\n  const prevMovedToSlideIndex = useRef6(slideIndex);\n  useEffect6(() => {\n    if (slideIndex !== void 0 && slideIndex !== prevMovedToSlideIndex.current && !autoplayReverse) {\n      goToSlide(slideIndex);\n      prevMovedToSlideIndex.current = slideIndex;\n    }\n  }, [slideIndex, autoplayReverse, goToSlide]);\n  useEffect6(() => {\n    let pauseStarted = null;\n    if (pause) {\n      pauseStarted = Date.now();\n    }\n    return () => {\n      if (pauseStarted !== null && autoplayLastTriggeredRef.current !== null) {\n        autoplayLastTriggeredRef.current += Date.now() - pauseStarted;\n      }\n    };\n  }, [pause]);\n  useEffect6(() => {\n    if (autoplay && !pause) {\n      const adjustedTimeoutMs = autoplayLastTriggeredRef.current !== null ? autoplayInterval - (Date.now() - autoplayLastTriggeredRef.current) : autoplayInterval;\n      autoplayTimeout.current = setTimeout(() => {\n        autoplayLastTriggeredRef.current = Date.now();\n        if (autoplayReverse) {\n          prevSlide();\n        } else {\n          nextSlide();\n        }\n      }, adjustedTimeoutMs);\n    }\n    if (autoplay && pause) {\n      clearTimeout(autoplayTimeout.current);\n    }\n    return () => {\n      clearTimeout(autoplayTimeout.current);\n    };\n  }, [pause, autoplay, autoplayInterval, autoplayReverse, prevSlide, nextSlide]);\n  const onKeyDown = event => {\n    let keyCommand = null;\n    Object.keys(keyCodeConfig).forEach(command => {\n      var _a;\n      if ((_a = keyCodeConfig[command]) == null ? void 0 : _a.includes(event.keyCode)) {\n        keyCommand = command;\n      }\n    });\n    if (keyCommand === null) return;\n    event.preventDefault();\n    event.stopPropagation();\n    switch (keyCommand) {\n      case \"nextSlide\":\n        onUserNavigation(event);\n        nextSlide();\n        break;\n      case \"previousSlide\":\n        onUserNavigation(event);\n        prevSlide();\n        break;\n      case \"firstSlide\":\n      case \"lastSlide\":\n        {\n          onUserNavigation(event);\n          const dotIndices = getDotIndexes(slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign);\n          if (keyCommand === \"firstSlide\") {\n            goToSlide(dotIndices[0]);\n          } else {\n            goToSlide(dotIndices[dotIndices.length - 1]);\n          }\n          break;\n        }\n      case \"pause\":\n        setPause(p => !p);\n        break;\n    }\n  };\n  const dragPositions = useRef6([]);\n  const handleDragEnd = e => {\n    if (!isDragging || !carouselRef.current) return;\n    setIsDragging(false);\n    let distanceFromInertia = 0;\n    if (dragPositions.current.length > 1) {\n      const startMove = dragPositions.current[0];\n      const endMove = dragPositions.current[dragPositions.current.length - 1];\n      const timeOffset = endMove.time - startMove.time;\n      const goodInertiaFeelConstant = 9;\n      const goodFrictionFeelConstant = 0.92;\n      const initialVelocity = goodInertiaFeelConstant * Math.abs((endMove.pos - startMove.pos) / timeOffset);\n      let velocity = initialVelocity;\n      while (Math.abs(velocity) > 1) {\n        distanceFromInertia += velocity;\n        velocity *= goodFrictionFeelConstant;\n      }\n    }\n    dragPositions.current = [];\n    const adjustedDragDistance = Math.abs(dragDistance) + Math.abs(distanceFromInertia);\n    onDragEnd(e);\n    prevXPosition.current = null;\n    setDragDistance(0);\n    const oneScrollWidth = carouselRef.current.offsetWidth * Math.min(1, slidesToScroll / slidesToShow);\n    const dragThreshold = oneScrollWidth * propsDragThreshold;\n    if (adjustedDragDistance < dragThreshold) {\n      goToSlide(currentSlide);\n      return;\n    }\n    const canMaintainVisualContinuity = slidesToShow >= 2 * slidesToScroll;\n    const timesToMove = canMaintainVisualContinuity ? 1 + Math.floor((adjustedDragDistance - dragThreshold) / oneScrollWidth) : 1;\n    let nextSlideIndex = currentSlide;\n    for (let index = 0; index < timesToMove; index += 1) {\n      if (dragDistance > 0) {\n        nextSlideIndex = getNextMoveIndex(scrollMode, wrapAround, nextSlideIndex, slideCount, slidesToScroll, slidesToShow, cellAlign);\n      } else {\n        nextSlideIndex = getPrevMoveIndex(scrollMode, wrapAround, nextSlideIndex, slidesToScroll, slidesToShow, cellAlign);\n      }\n    }\n    if (nextSlideIndex !== currentSlide) {\n      onUserNavigation(e);\n    }\n    goToSlide(nextSlideIndex);\n  };\n  const onTouchStart = useCallback4(e => {\n    if (!mobileDraggingEnabled || !sliderListRef.current || !carouselRef.current) {\n      return;\n    }\n    setIsDragging(true);\n    preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n    onDragStart(e);\n  }, [carouselRef, onDragStart, mobileDraggingEnabled]);\n  const handlePointerMove = useCallback4(xPosition => {\n    if (!isDragging) return;\n    const isFirstMove = prevXPosition.current === null;\n    const delta = prevXPosition.current !== null ? xPosition - prevXPosition.current : 0;\n    const nextDragDistance = dragDistance + delta;\n    const now = Date.now();\n    while (dragPositions.current.length > 0) {\n      if (now - dragPositions.current[0].time <= 100) {\n        break;\n      }\n      dragPositions.current.shift();\n    }\n    dragPositions.current.push({\n      pos: nextDragDistance,\n      time: now\n    });\n    if (!isFirstMove) {\n      setDragDistance(nextDragDistance);\n    }\n    prevXPosition.current = xPosition;\n  }, [isDragging, dragDistance]);\n  const onTouchMove = useCallback4(e => {\n    if (!isDragging || !carouselRef.current) return;\n    onDragStart(e);\n    const moveValue = carouselRef.current.offsetWidth - e.touches[0].pageX;\n    handlePointerMove(moveValue);\n  }, [isDragging, carouselRef, handlePointerMove, onDragStart]);\n  const onMouseDown = useCallback4(e => {\n    if (!desktopDraggingEnabled || !sliderListRef.current || !carouselRef.current) return;\n    setIsDragging(true);\n    preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n    onDragStart(e);\n  }, [carouselRef, desktopDraggingEnabled, onDragStart]);\n  const onMouseMove = useCallback4(e => {\n    if (!isDragging || !carouselRef.current) return;\n    onDrag(e);\n    const offsetX = e.clientX - carouselRef.current.getBoundingClientRect().left;\n    const moveValue = carouselRef.current.offsetWidth - offsetX;\n    handlePointerMove(moveValue);\n  }, [carouselRef, isDragging, handlePointerMove, onDrag]);\n  const onMouseUp = e => {\n    e.preventDefault();\n    handleDragEnd(e);\n  };\n  const onMouseEnter = useCallback4(() => {\n    if (pauseOnHover) {\n      setPause(true);\n    }\n  }, [pauseOnHover]);\n  const onMouseLeave = useCallback4(() => {\n    if (pauseOnHover) {\n      setPause(false);\n    }\n  }, [pauseOnHover]);\n  const {\n    frameHeight,\n    handleVisibleSlideHeightChange,\n    initializedAdaptiveHeight\n  } = useFrameHeight(adaptiveHeight, slidesToShow, slideCount);\n  const renderSlides = typeOfSlide => {\n    const slides = filteredSlides.map((child, index) => {\n      return /* @__PURE__ */jsx7(slide_default, {\n        id: `${typeOfSlide}-${index}`,\n        count: slideCount,\n        index,\n        isCurrentSlide: currentSlide === index,\n        typeOfSlide,\n        wrapAround,\n        cellSpacing,\n        animation,\n        speed,\n        zoomScale,\n        onVisibleSlideHeightChange: handleVisibleSlideHeightChange,\n        slideWidth,\n        updateIOEntry: updateSlideIOEntry,\n        adaptiveHeight,\n        initializedAdaptiveHeight,\n        carouselRef,\n        children: child\n      }, `${typeOfSlide}-${index}`);\n    });\n    return slides;\n  };\n  return /* @__PURE__ */jsxs(\"div\", {\n    className: \"slider-container\",\n    style: {\n      position: \"relative\"\n    },\n    onMouseEnter,\n    onMouseLeave,\n    children: [/* @__PURE__ */jsx7(announce_slide_default, {\n      ariaLive: autoplay && !pause ? \"off\" : \"polite\",\n      message: renderAnnounceSlideMessage({\n        currentSlide,\n        count: slideCount\n      })\n    }), controls_default(props, slideCount, currentSlide, goToSlide, nextSlide, prevSlide, slidesToScroll), /* @__PURE__ */jsx7(\"div\", {\n      className: [\"slider-frame\", className || \"\"].join(\" \").trim(),\n      style: __spreadValues({\n        overflow: \"hidden\",\n        width: \"100%\",\n        position: \"relative\",\n        outline: \"none\",\n        touchAction: \"pan-y\",\n        height: frameHeight,\n        transition: adaptiveHeightAnimation ? \"height 300ms ease-in-out\" : void 0,\n        willChange: \"height\",\n        userSelect: \"none\"\n      }, style),\n      \"aria-label\": frameAriaLabel,\n      role: \"region\",\n      tabIndex: enableKeyboardControls ? 0 : -1,\n      onKeyDown: enableKeyboardControls ? onKeyDown : void 0,\n      ref: carouselRef,\n      onMouseUp,\n      onMouseDown,\n      onMouseMove,\n      onMouseLeave: onMouseUp,\n      onTouchStart,\n      onTouchEnd: handleDragEnd,\n      onTouchMove,\n      children: /* @__PURE__ */jsxs(SliderList, {\n        animationDistance,\n        cellAlign,\n        currentSlide,\n        disableEdgeSwiping: props.disableEdgeSwiping,\n        draggedOffset: preDragOffset.current - dragDistance,\n        disableAnimation,\n        easing: props.easing,\n        edgeEasing: props.edgeEasing,\n        isDragging,\n        ref: setSliderListRef,\n        scrollMode,\n        animation,\n        slideCount,\n        slidesToScroll,\n        slidesToShow,\n        speed,\n        slideWidth,\n        wrapAround,\n        setIsAnimating,\n        children: [wrapAround ? renderSlides(\"prev-cloned\") : null, renderSlides(), wrapAround ? renderSlides(\"next-cloned\") : null]\n      })\n    })]\n  });\n});\nCarousel.defaultProps = default_carousel_props_default;\nCarousel.displayName = \"Carousel\";\nexport { Alignment, Directions, NextButton, PagingDots, Positions, PreviousButton, ScrollMode, Carousel as default };","map":{"version":3,"names":["React5","useEffect","useEffect6","useState","useState5","useRef","useRef6","useCallback","useCallback4","useRef2","useEffect2","useSlideIntersectionObserver","elementRef","rootRef","callback","entry","setEntry","callbackRef","current","node","root","window","IntersectionObserver","observer","entries","forEach","entry2","threshold","observe","disconnect","jsx","getSlideWidth","count","wrapAround","getSlideStyles","isCurrentSlide","isVisibleSlide","cellSpacing","animation","speed","zoomScale","adaptiveHeight","initializedAdaptiveHeight","slideWidth","width","visibleSlideOpacity","animationSpeed","height","padding","transition","transform","opacity","generateIndex","index","typeOfSlide","Slide","children","onVisibleSlideHeightChange","updateIOEntry","id","carouselRef","_a","customIndex","slideRef","intersectionRatio","isVisible","isIntersecting","isFullyVisible","prevIsVisibleRef","_a2","slideHeight","getBoundingClientRect","prevIsVisible","currentSlideClass","__spreadProps","__spreadValues","ref","inert","className","style","slide_default","jsx2","styles","position","overflow","margin","clip","whiteSpace","border","AnnounceSlide","message","ariaLive","tabIndex","defaultRenderAnnounceSlideMessage","currentSlide","announce_slide_default","React3","useEffect4","Alignment","Alignment2","Directions","Directions2","Positions","Positions2","ScrollMode","ScrollMode2","getNextMoveIndex","scrollMode","slideCount","slidesToScroll","slidesToShow","cellAlign","Math","min","getPrevMoveIndex","max","getDefaultSlideIndex","slideIndex","autoplayReverse","dotIndexes","getDotIndexes","length","getBoundedIndex","rawIndex","jsx3","defaultButtonStyles","disabled","background","color","textTransform","cursor","prevButtonDisabled","PreviousButton","previousSlide","defaultControlsConfig","prevButtonClassName","prevButtonStyle","prevButtonText","prevButtonOnClick","onUserNavigation","previousDisabled","handleClick","event","defaultPrevented","preventDefault","onClick","type","nextButtonDisabled","NextButton","nextSlide","nextButtonClassName","nextButtonStyle","nextButtonText","nextButtonOnClick","nextDisabled","scrollSlides","i","push","lastPossibleIndexWithoutWhitespace","firstPossibleIndexWithoutWhitespace","reverse","PagingDots","pagingDotsIndices","pagingDotsContainerClassName","pagingDotsClassName","pagingDotsStyle","pagingDotsOnClick","goToSlide","listStyles","top","display","listStyleType","getButtonStyles","active","fill","currentSlideBounded","map","isActive","focusable","viewBox","cx","cy","r","useEffect3","useState2","useRef3","useTween","durationMs","easingFunction","navigationNum","shouldInterrupt","normalizedTimeRaw","setNormalizedTime","startTime","Date","now","rAF","isFirstRender","lastNavigationNum","normalizedTime","tick","requestAnimationFrame","currentTime","normalizedTime2","cancelAnimationFrame","isAnimating","value","jsx4","getPercentOffsetForSlide","renderedSlideCount","singleSlidePercentOfWhole","slide0Offset","excessSlides","excessLeftSlides","currentSlideOffsetFrom0","SliderList","forwardRef","animationDistance","disableAnimation","disableEdgeSwiping","draggedOffset","easing","edgeEasing","isDragging","setIsAnimating","forwardedRef","listVisibleWidth","percentOffsetForSlideProps","clampedDraggedOffset","clampOffsets","slideBasedOffset","isEdgeEasing","positioning","transitionOffset","textAlign","userSelect","displayName","Fragment","commonStyles","zIndex","left","bottom","right","getControlContainerFlexStyles","pos","alignItems","justifyContent","getControlContainerStyles","jsx5","controlsMap","funcName","key","renderControls","props","prevSlide","withoutControls","disableCheckProps","control","pointerEvents","toLowerCase","containerClassName","join","trim","call","vertical","controls_default","Fragment2","jsx6","easeOut","t","__pow","defaultProps","adaptiveHeightAnimation","afterSlide","autoplay","autoplayInterval","beforeSlide","dragging","dragThreshold","enableKeyboardControls","frameAriaLabel","keyCodeConfig","firstSlide","lastSlide","pause","onDragStart","onDrag","onDragEnd","pauseOnHover","renderAnnounceSlideMessage","renderBottomCenterControls","renderCenterLeftControls","renderCenterRightControls","swiping","default_carousel_props_default","useCallback3","useMemo","useState4","useCallback2","useRef4","useState3","useStateWithRef","initialState","setValue","valueRef","setValueAndRef","newValue","useFrameHeight","visibleHeights","setVisibleHeights","visibleHeightsRef","setInitializedAdaptiveHeight","handleVisibleSlideHeightChange","latestVisibleHeights","newVisibleHeights","filter","ceil","frameHeight","maxHeight","useEffect5","useRef5","useForwardRef","targetRef","jsx7","jsxs","Carousel","rawProps","propsCellAlign","desktopDraggingEnabled","propsDragThreshold","propsScrollMode","propsSlidesToScroll","propsSlidesToShow","mobileDraggingEnabled","filteredSlides","Children","toArray","Boolean","slideIOEntries","setSlideIOEntries","Map","visibleCount","Array","from","visible","constantVisibleCount","setConstantVisibleCount","setCurrentSlide","setPause","setIsDragging","dragDistance","setDragDistance","setAnimationDistance","updateSlideIOEntry","get","prev","newMap","set","prevDragged","prevXPosition","preDragOffset","sliderListRef","defaultCarouselRef","autoplayTimeout","autoplayLastTriggeredRef","isMounted","setSliderListRef","querySelectorAll","el","setAttribute","targetSlideUnbounded","targetSlideBounded","slideChanged","currentOffset","sliderWidth","offsetWidth","targetOffset","slideSetWidth","msToEndOfAnimation","setTimeout","nextSlideIndex","prevSlideIndex","prevMovedToSlideIndex","pauseStarted","adjustedTimeoutMs","clearTimeout","onKeyDown","keyCommand","Object","keys","command","includes","keyCode","stopPropagation","dotIndices","p","dragPositions","handleDragEnd","e","distanceFromInertia","startMove","endMove","timeOffset","time","goodInertiaFeelConstant","goodFrictionFeelConstant","initialVelocity","abs","velocity","adjustedDragDistance","oneScrollWidth","canMaintainVisualContinuity","timesToMove","floor","onTouchStart","handlePointerMove","xPosition","isFirstMove","delta","nextDragDistance","shift","onTouchMove","moveValue","touches","pageX","onMouseDown","onMouseMove","offsetX","clientX","onMouseUp","onMouseEnter","onMouseLeave","renderSlides","slides","child","outline","touchAction","willChange","role","onTouchEnd"],"sources":["C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\carousel.tsx","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\slide.tsx","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\hooks\\use-slide-intersection-observer.ts","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\announce-slide.tsx","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\slider-list.tsx","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\default-controls.tsx","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\types.ts","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\utils.ts","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\hooks\\use-tween.ts","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\controls.tsx","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\control-styles.ts","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\default-carousel-props.tsx","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\hooks\\use-frame-height.ts","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\hooks\\use-state-with-ref.ts","C:\\Users\\aslam\\Files\\React Project\\tuo\\node_modules\\nuka-carousel\\src\\hooks\\use-forward-ref.ts"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport Slide from './slide';\nimport AnnounceSlide from './announce-slide';\nimport { getPercentOffsetForSlide, SliderList } from './slider-list';\nimport {\n  CarouselProps,\n  CellAlign,\n  InternalCarouselProps,\n  KeyCodeConfig,\n  KeyCodeFunction,\n  ScrollMode,\n} from './types';\nimport renderControls from './controls';\nimport defaultProps from './default-carousel-props';\nimport {\n  getNextMoveIndex,\n  getPrevMoveIndex,\n  getDefaultSlideIndex,\n  getBoundedIndex,\n} from './utils';\nimport { useFrameHeight } from './hooks/use-frame-height';\nimport { getDotIndexes } from './default-controls';\nimport { useForwardRef } from './hooks/use-forward-ref';\n\nexport const Carousel = React.forwardRef<HTMLDivElement, CarouselProps>(\n  (rawProps, ref): React.ReactElement => {\n    /**\n     * We need this cast because we want the component's properties to seem\n     * optional to external users, but always-present for the internal\n     * implementation.\n     *\n     * This cast is safe due to the `Carousel.defaultProps = defaultProps;`\n     * statement below. That guarantees all the properties are present, since\n     * `defaultProps` has type `InternalCarouselProps`.\n     */\n    const props = rawProps as InternalCarouselProps;\n\n    const {\n      adaptiveHeight,\n      adaptiveHeightAnimation,\n      afterSlide,\n      animation,\n      autoplay,\n      autoplayInterval,\n      autoplayReverse,\n      beforeSlide,\n      cellAlign: propsCellAlign,\n      cellSpacing,\n      children,\n      className,\n      disableAnimation,\n      dragging: desktopDraggingEnabled,\n      dragThreshold: propsDragThreshold,\n      enableKeyboardControls,\n      frameAriaLabel,\n      keyCodeConfig,\n      onDrag,\n      onDragEnd,\n      onDragStart,\n      onUserNavigation,\n      pauseOnHover,\n      renderAnnounceSlideMessage,\n      scrollMode: propsScrollMode,\n      slideIndex,\n      slidesToScroll: propsSlidesToScroll,\n      slidesToShow: propsSlidesToShow,\n      slideWidth,\n      speed,\n      style,\n      swiping: mobileDraggingEnabled,\n      wrapAround,\n      zoomScale,\n    } = props;\n\n    const filteredSlides = React.Children.toArray(children).filter(Boolean);\n    const slideCount = filteredSlides.length;\n\n    const cellAlign: CellAlign =\n      slideWidth || propsSlidesToScroll === 'auto' ? 'left' : propsCellAlign;\n\n    const scrollMode: ScrollMode =\n      propsSlidesToScroll === 'auto' ? ScrollMode.remainder : propsScrollMode;\n\n    const [slideIOEntries, setSlideIOEntries] = useState(\n      new Map<string, boolean>()\n    );\n\n    const visibleCount = Array.from(slideIOEntries).filter(\n      ([, visible]) => visible\n    ).length;\n\n    const [constantVisibleCount, setConstantVisibleCount] =\n      useState<number>(visibleCount);\n\n    const slidesToShow = slideWidth ? constantVisibleCount : propsSlidesToShow;\n\n    const slidesToScroll =\n      animation === 'fade'\n        ? slidesToShow\n        : propsSlidesToScroll === 'auto'\n        ? Math.max(constantVisibleCount, 1)\n        : propsSlidesToScroll;\n\n    const [currentSlide, setCurrentSlide] = useState<number>(() =>\n      getDefaultSlideIndex(\n        slideIndex,\n        slideCount,\n        slidesToShow,\n        slidesToScroll,\n        cellAlign,\n        autoplayReverse,\n        scrollMode\n      )\n    );\n    const [pause, setPause] = useState<boolean>(false);\n    const [isDragging, setIsDragging] = useState<boolean>(false);\n    const [dragDistance, setDragDistance] = useState<number>(0);\n    const [animationDistance, setAnimationDistance] = useState<number>(0);\n    const [isAnimating, setIsAnimating] = useState<boolean>(false);\n\n    const updateSlideIOEntry = useCallback(\n      (id: string, isFullyVisible: boolean) => {\n        if (!!slideIOEntries.get(id) === isFullyVisible) return;\n\n        setSlideIOEntries((prev) => {\n          const newMap = new Map(prev);\n          newMap.set(id, isFullyVisible);\n          return newMap;\n        });\n      },\n      [slideIOEntries]\n    );\n\n    const prevDragged = useRef(false);\n\n    useEffect(() => {\n      if (isDragging) prevDragged.current = true;\n\n      if (!(isDragging || isAnimating)) {\n        // Wait for the animation to complete after dragging\n        if (!prevDragged.current) setConstantVisibleCount(visibleCount);\n        prevDragged.current = false;\n      }\n    }, [isAnimating, isDragging, visibleCount]);\n\n    const prevXPosition = useRef<number | null>(null);\n    const preDragOffset = useRef<number>(0);\n    const sliderListRef = useRef<HTMLDivElement | null>(null);\n    const defaultCarouselRef = useRef<HTMLDivElement>(null);\n    const autoplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n    const autoplayLastTriggeredRef = useRef<number | null>(null);\n    const isMounted = useRef<boolean>(true);\n\n    const setSliderListRef = useCallback((node: HTMLDivElement) => {\n      if (node) {\n        // disable img draggable attribute by default, this will improve the dragging\n        // applying the querySelectorAll on just the descendants of the sliderList prevents\n        // impacting DOM elements outside our scope\n        node\n          .querySelectorAll('.slider-list img')\n          .forEach((el) => el.setAttribute('draggable', 'false'));\n      }\n      sliderListRef.current = node;\n    }, []);\n\n    useEffect(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      };\n    }, []);\n\n    const forwardedRef = useForwardRef<HTMLDivElement>(ref);\n    const carouselRef = forwardedRef || defaultCarouselRef;\n\n    const goToSlide = useCallback(\n      (targetSlideUnbounded: number) => {\n        if (!sliderListRef.current || !carouselRef.current) return;\n\n        const targetSlideBounded = getBoundedIndex(\n          targetSlideUnbounded,\n          slideCount\n        );\n\n        const slideChanged = targetSlideUnbounded !== currentSlide;\n        slideChanged && beforeSlide(currentSlide, targetSlideBounded);\n\n        // Calculate the distance the slide transition animation needs to cover.\n        const currentOffset =\n          sliderListRef.current.getBoundingClientRect().left -\n          carouselRef.current.getBoundingClientRect().left;\n        const sliderWidth = sliderListRef.current.offsetWidth;\n        let targetOffset =\n          (getPercentOffsetForSlide(\n            targetSlideBounded,\n            slideCount,\n            slidesToShow,\n            cellAlign,\n            wrapAround\n          ) /\n            100) *\n          sliderWidth;\n        if (wrapAround) {\n          // We have to do a bit of a recovery effort to figure out the closest\n          // offset based on the direction we're going in the slides. The reason\n          // it's complicated is because, when wrapped, both the current offset\n          // and the calculated target offset are based on bounded slide indices -\n          // that is, when wrapping, we often skip back to the first or last slide\n          // seamlessly to make the carousel appear to infinitely repeat\n\n          // The DOM width of `slideCount` slides\n          const slideSetWidth = sliderWidth / 3;\n\n          if (targetSlideUnbounded < 0) {\n            targetOffset += slideSetWidth;\n          }\n          if (targetSlideUnbounded >= slideCount) {\n            targetOffset -= slideSetWidth;\n          }\n        }\n\n        setAnimationDistance(targetOffset - currentOffset);\n\n        if (slideChanged) {\n          setCurrentSlide(targetSlideBounded);\n\n          // if animation is disabled decrease the speed to 40\n          const msToEndOfAnimation = !disableAnimation ? speed || 500 : 40;\n          setTimeout(() => {\n            if (!isMounted.current) return;\n            afterSlide(targetSlideBounded);\n          }, msToEndOfAnimation);\n        }\n      },\n      [\n        afterSlide,\n        beforeSlide,\n        carouselRef,\n        cellAlign,\n        currentSlide,\n        disableAnimation,\n        speed,\n        slideCount,\n        slidesToShow,\n        wrapAround,\n      ]\n    );\n\n    const nextSlide = useCallback(() => {\n      const nextSlideIndex = getNextMoveIndex(\n        scrollMode,\n        wrapAround,\n        currentSlide,\n        slideCount,\n        slidesToScroll,\n        slidesToShow,\n        cellAlign\n      );\n\n      if (currentSlide !== nextSlideIndex) {\n        goToSlide(nextSlideIndex);\n      }\n    }, [\n      cellAlign,\n      currentSlide,\n      goToSlide,\n      slidesToScroll,\n      scrollMode,\n      slideCount,\n      slidesToShow,\n      wrapAround,\n    ]);\n\n    const prevSlide = useCallback(() => {\n      const prevSlideIndex = getPrevMoveIndex(\n        scrollMode,\n        wrapAround,\n        currentSlide,\n        slidesToScroll,\n        slidesToShow,\n        cellAlign\n      );\n\n      if (currentSlide !== prevSlideIndex) {\n        goToSlide(prevSlideIndex);\n      }\n    }, [\n      cellAlign,\n      currentSlide,\n      goToSlide,\n      slidesToScroll,\n      scrollMode,\n      slidesToShow,\n      wrapAround,\n    ]);\n\n    // When user changed the slideIndex property from outside.\n    const prevMovedToSlideIndex = useRef(slideIndex);\n    useEffect(() => {\n      if (\n        slideIndex !== undefined &&\n        slideIndex !== prevMovedToSlideIndex.current &&\n        !autoplayReverse\n      ) {\n        goToSlide(slideIndex);\n        prevMovedToSlideIndex.current = slideIndex;\n      }\n    }, [slideIndex, autoplayReverse, goToSlide]);\n\n    useEffect(() => {\n      let pauseStarted: number | null = null;\n\n      // Keep track of when autoplay was paused so we can resume it with the same\n      // remaining time to the next slide transition\n      if (pause) {\n        pauseStarted = Date.now();\n      }\n\n      return () => {\n        if (\n          pauseStarted !== null &&\n          autoplayLastTriggeredRef.current !== null\n        ) {\n          autoplayLastTriggeredRef.current += Date.now() - pauseStarted;\n        }\n      };\n    }, [pause]);\n\n    useEffect(() => {\n      if (autoplay && !pause) {\n        // Adjust the timeout duration to account for changes that triggered the\n        // re-creation of this timeout, such as the currentSlide being changed\n        // periodically to make wrapAround loop forever\n        const adjustedTimeoutMs =\n          autoplayLastTriggeredRef.current !== null\n            ? autoplayInterval - (Date.now() - autoplayLastTriggeredRef.current)\n            : autoplayInterval;\n\n        autoplayTimeout.current = setTimeout(() => {\n          autoplayLastTriggeredRef.current = Date.now();\n\n          if (autoplayReverse) {\n            prevSlide();\n          } else {\n            nextSlide();\n          }\n        }, adjustedTimeoutMs);\n      }\n\n      // Clear the timeout if user hover on carousel\n      if (autoplay && pause) {\n        clearTimeout(autoplayTimeout.current);\n      }\n\n      return () => {\n        clearTimeout(autoplayTimeout.current);\n      };\n    }, [\n      pause,\n      autoplay,\n      autoplayInterval,\n      autoplayReverse,\n      prevSlide,\n      nextSlide,\n    ]);\n\n    const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n      let keyCommand: KeyCodeFunction = null;\n      (Object.keys(keyCodeConfig) as (keyof KeyCodeConfig)[]).forEach(\n        (command) => {\n          if (keyCodeConfig[command]?.includes(event.keyCode)) {\n            keyCommand = command;\n          }\n        }\n      );\n\n      if (keyCommand === null) return;\n\n      // At this point we know some action is going to be triggered, so we\n      // preventDefault to avoid the browser interpreting the key event and\n      // stopPropagation to avoid any higher-up handlers from interpreting it.\n      event.preventDefault();\n      event.stopPropagation();\n\n      switch (keyCommand) {\n        case 'nextSlide':\n          onUserNavigation(event);\n          nextSlide();\n          break;\n        case 'previousSlide':\n          onUserNavigation(event);\n          prevSlide();\n          break;\n        case 'firstSlide':\n        case 'lastSlide': {\n          onUserNavigation(event);\n\n          const dotIndices = getDotIndexes(\n            slideCount,\n            slidesToScroll,\n            scrollMode,\n            slidesToShow,\n            wrapAround,\n            cellAlign\n          );\n\n          if (keyCommand === 'firstSlide') {\n            goToSlide(dotIndices[0]);\n          } else {\n            goToSlide(dotIndices[dotIndices.length - 1]);\n          }\n          break;\n        }\n        case 'pause':\n          setPause((p) => !p);\n          break;\n      }\n    };\n\n    const dragPositions = useRef<{ pos: number; time: number }[]>([]);\n\n    const handleDragEnd = (\n      e: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n    ) => {\n      if (!isDragging || !carouselRef.current) return;\n\n      setIsDragging(false);\n\n      // Inertia calculation is used to allow quick flicks to scroll the carousel\n      // where they might not based on the start and end points of the gesture\n      // alone. In certain conditions, the inertia may also scroll the carousel\n      // several times.\n      let distanceFromInertia = 0;\n      if (dragPositions.current.length > 1) {\n        const startMove = dragPositions.current[0];\n        const endMove = dragPositions.current[dragPositions.current.length - 1];\n        const timeOffset = endMove.time - startMove.time;\n        const goodInertiaFeelConstant = 9;\n        const goodFrictionFeelConstant = 0.92;\n        const initialVelocity =\n          goodInertiaFeelConstant *\n          Math.abs((endMove.pos - startMove.pos) / timeOffset);\n        let velocity = initialVelocity;\n\n        while (Math.abs(velocity) > 1) {\n          distanceFromInertia += velocity;\n          velocity *= goodFrictionFeelConstant;\n        }\n      }\n      dragPositions.current = [];\n\n      const adjustedDragDistance =\n        Math.abs(dragDistance) + Math.abs(distanceFromInertia);\n\n      onDragEnd(e);\n\n      prevXPosition.current = null;\n      setDragDistance(0);\n\n      const oneScrollWidth =\n        carouselRef.current.offsetWidth *\n        Math.min(1, slidesToScroll / slidesToShow);\n      const dragThreshold = oneScrollWidth * propsDragThreshold;\n\n      if (adjustedDragDistance < dragThreshold) {\n        goToSlide(currentSlide);\n        return;\n      }\n\n      // If skipping over multiple slides at a time is still roughly trackable by\n      // your eyes, we allow for skipping multiple slides with a single gesture.\n      // This formula is just based off an observation that it is confusing to\n      // skip from slides 1 to 3 when only one slide is shown at a time, but\n      // skipping from 1 to 4 or so with two slides shown at a time is pulled-back\n      // enough that you can still roughly keep track of your place in the\n      // carousel.\n      const canMaintainVisualContinuity = slidesToShow >= 2 * slidesToScroll;\n      const timesToMove = canMaintainVisualContinuity\n        ? 1 +\n          Math.floor((adjustedDragDistance - dragThreshold) / oneScrollWidth)\n        : 1;\n\n      let nextSlideIndex = currentSlide;\n      for (let index = 0; index < timesToMove; index += 1) {\n        if (dragDistance > 0) {\n          nextSlideIndex = getNextMoveIndex(\n            scrollMode,\n            wrapAround,\n            nextSlideIndex,\n            slideCount,\n            slidesToScroll,\n            slidesToShow,\n            cellAlign\n          );\n        } else {\n          nextSlideIndex = getPrevMoveIndex(\n            scrollMode,\n            wrapAround,\n            nextSlideIndex,\n            slidesToScroll,\n            slidesToShow,\n            cellAlign\n          );\n        }\n      }\n\n      if (nextSlideIndex !== currentSlide) {\n        onUserNavigation(e);\n      }\n\n      goToSlide(nextSlideIndex);\n    };\n\n    const onTouchStart = useCallback(\n      (e: React.TouchEvent<HTMLDivElement>) => {\n        if (\n          !mobileDraggingEnabled ||\n          !sliderListRef.current ||\n          !carouselRef.current\n        ) {\n          return;\n        }\n        setIsDragging(true);\n        preDragOffset.current =\n          sliderListRef.current.getBoundingClientRect().left -\n          carouselRef.current.getBoundingClientRect().left;\n\n        onDragStart(e);\n      },\n      [carouselRef, onDragStart, mobileDraggingEnabled]\n    );\n\n    const handlePointerMove = useCallback(\n      (xPosition: number) => {\n        if (!isDragging) return;\n\n        const isFirstMove = prevXPosition.current === null;\n        const delta =\n          prevXPosition.current !== null\n            ? xPosition - prevXPosition.current\n            : 0;\n        const nextDragDistance = dragDistance + delta;\n\n        const now = Date.now();\n        // Maintain a buffer of drag positions from the last 100ms\n        while (dragPositions.current.length > 0) {\n          if (now - dragPositions.current[0].time <= 100) {\n            break;\n          }\n          dragPositions.current.shift();\n        }\n        dragPositions.current.push({ pos: nextDragDistance, time: now });\n\n        if (!isFirstMove) {\n          // nextDragDistance will always be `0` on the first move event, so we\n          // skip it because the value is already set to 0 at this point\n          setDragDistance(nextDragDistance);\n        }\n\n        prevXPosition.current = xPosition;\n      },\n      [isDragging, dragDistance]\n    );\n\n    const onTouchMove = useCallback(\n      (e: React.TouchEvent<HTMLDivElement>) => {\n        if (!isDragging || !carouselRef.current) return;\n\n        onDragStart(e);\n\n        const moveValue = carouselRef.current.offsetWidth - e.touches[0].pageX;\n\n        handlePointerMove(moveValue);\n      },\n      [isDragging, carouselRef, handlePointerMove, onDragStart]\n    );\n\n    const onMouseDown = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (\n          !desktopDraggingEnabled ||\n          !sliderListRef.current ||\n          !carouselRef.current\n        )\n          return;\n\n        setIsDragging(true);\n\n        preDragOffset.current =\n          sliderListRef.current.getBoundingClientRect().left -\n          carouselRef.current.getBoundingClientRect().left;\n\n        onDragStart(e);\n      },\n      [carouselRef, desktopDraggingEnabled, onDragStart]\n    );\n\n    const onMouseMove = useCallback(\n      (e: React.MouseEvent<HTMLDivElement>) => {\n        if (!isDragging || !carouselRef.current) return;\n\n        onDrag(e);\n\n        const offsetX =\n          e.clientX - carouselRef.current.getBoundingClientRect().left;\n        const moveValue = carouselRef.current.offsetWidth - offsetX;\n\n        handlePointerMove(moveValue);\n      },\n      [carouselRef, isDragging, handlePointerMove, onDrag]\n    );\n\n    const onMouseUp = (e: React.MouseEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      handleDragEnd(e);\n    };\n\n    const onMouseEnter = useCallback(() => {\n      if (pauseOnHover) {\n        setPause(true);\n      }\n    }, [pauseOnHover]);\n\n    const onMouseLeave = useCallback(() => {\n      if (pauseOnHover) {\n        setPause(false);\n      }\n    }, [pauseOnHover]);\n\n    const {\n      frameHeight,\n      handleVisibleSlideHeightChange,\n      initializedAdaptiveHeight,\n    } = useFrameHeight(adaptiveHeight, slidesToShow, slideCount);\n\n    const renderSlides = (typeOfSlide?: 'prev-cloned' | 'next-cloned') => {\n      const slides = filteredSlides.map((child, index) => {\n        return (\n          <Slide\n            key={`${typeOfSlide}-${index}`}\n            id={`${typeOfSlide}-${index}`}\n            count={slideCount}\n            index={index}\n            isCurrentSlide={currentSlide === index}\n            typeOfSlide={typeOfSlide}\n            wrapAround={wrapAround}\n            cellSpacing={cellSpacing}\n            animation={animation}\n            speed={speed}\n            zoomScale={zoomScale}\n            onVisibleSlideHeightChange={handleVisibleSlideHeightChange}\n            slideWidth={slideWidth}\n            updateIOEntry={updateSlideIOEntry}\n            adaptiveHeight={adaptiveHeight}\n            initializedAdaptiveHeight={initializedAdaptiveHeight}\n            carouselRef={carouselRef}\n          >\n            {child}\n          </Slide>\n        );\n      });\n\n      return slides;\n    };\n\n    return (\n      <div\n        className={'slider-container'}\n        style={{\n          position: 'relative',\n        }}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n      >\n        <AnnounceSlide\n          ariaLive={autoplay && !pause ? 'off' : 'polite'}\n          message={renderAnnounceSlideMessage({\n            currentSlide,\n            count: slideCount,\n          })}\n        />\n\n        {renderControls(\n          props,\n          slideCount,\n          currentSlide,\n          goToSlide,\n          nextSlide,\n          prevSlide,\n          slidesToScroll\n        )}\n\n        <div\n          className={['slider-frame', className || ''].join(' ').trim()}\n          style={{\n            overflow: 'hidden',\n            width: '100%',\n            position: 'relative',\n            outline: 'none',\n            touchAction: 'pan-y',\n            height: frameHeight,\n            transition: adaptiveHeightAnimation\n              ? 'height 300ms ease-in-out'\n              : undefined,\n            willChange: 'height',\n            userSelect: 'none',\n            ...style,\n          }}\n          aria-label={frameAriaLabel}\n          role=\"region\"\n          tabIndex={enableKeyboardControls ? 0 : -1}\n          onKeyDown={enableKeyboardControls ? onKeyDown : undefined}\n          ref={carouselRef}\n          onMouseUp={onMouseUp}\n          onMouseDown={onMouseDown}\n          onMouseMove={onMouseMove}\n          onMouseLeave={onMouseUp}\n          onTouchStart={onTouchStart}\n          onTouchEnd={handleDragEnd}\n          onTouchMove={onTouchMove}\n        >\n          <SliderList\n            animationDistance={animationDistance}\n            cellAlign={cellAlign}\n            currentSlide={currentSlide}\n            disableEdgeSwiping={props.disableEdgeSwiping}\n            draggedOffset={preDragOffset.current - dragDistance}\n            disableAnimation={disableAnimation}\n            easing={props.easing}\n            edgeEasing={props.edgeEasing}\n            isDragging={isDragging}\n            ref={setSliderListRef}\n            scrollMode={scrollMode}\n            animation={animation}\n            slideCount={slideCount}\n            slidesToScroll={slidesToScroll}\n            slidesToShow={slidesToShow}\n            speed={speed}\n            slideWidth={slideWidth}\n            wrapAround={wrapAround}\n            setIsAnimating={setIsAnimating}\n          >\n            {wrapAround ? renderSlides('prev-cloned') : null}\n            {renderSlides()}\n            {wrapAround ? renderSlides('next-cloned') : null}\n          </SliderList>\n        </div>\n      </div>\n    );\n  }\n);\n\nCarousel.defaultProps = defaultProps;\nCarousel.displayName = 'Carousel';\n\nexport default Carousel;\n","import React, {\n  CSSProperties,\n  ReactNode,\n  useRef,\n  useEffect,\n  RefObject,\n} from 'react';\nimport { useSlideIntersectionObserver } from './hooks/use-slide-intersection-observer';\n\nconst getSlideWidth = (count: number, wrapAround?: boolean): string =>\n  `${wrapAround ? 100 / (3 * count) : 100 / count}%`;\n\nconst getSlideStyles = (\n  count: number,\n  isCurrentSlide: boolean,\n  isVisibleSlide: boolean,\n  wrapAround: boolean,\n  cellSpacing: number,\n  animation: 'zoom' | 'fade' | undefined,\n  speed: number,\n  zoomScale: number | undefined,\n  adaptiveHeight: boolean,\n  initializedAdaptiveHeight: boolean,\n  slideWidth: CSSProperties['width']\n): CSSProperties => {\n  const width = slideWidth ?? getSlideWidth(count, wrapAround);\n  // const width = getSlideWidth(count, wrapAround);\n  const visibleSlideOpacity = isVisibleSlide ? 1 : 0;\n  const animationSpeed = animation === 'fade' ? 200 : 500;\n\n  let height = 'auto';\n  if (adaptiveHeight) {\n    if (initializedAdaptiveHeight) {\n      // Once adaptiveHeight is initialized, the frame will size to the height\n      // of all the visible slides\n      height = '100%';\n    } else if (isVisibleSlide) {\n      // If the slide is visible but we're still measuring heights, have\n      // visible slides just take up their natural height\n      height = 'auto';\n    } else {\n      // If the slide is not visible and we're still measuring heights, the\n      // slide should have height 0 so it doesn't contribute to the measured\n      // height of the frame\n      height = '0';\n    }\n  }\n\n  return {\n    width,\n    height,\n    padding: `0 ${cellSpacing ? cellSpacing / 2 : 0}px`,\n    transition: animation ? `${speed || animationSpeed}ms ease 0s` : undefined,\n    transform:\n      animation === 'zoom'\n        ? `scale(${isCurrentSlide && isVisibleSlide ? 1 : zoomScale || 0.85})`\n        : undefined,\n    opacity: animation === 'fade' ? visibleSlideOpacity : 1,\n  };\n};\n\nconst generateIndex = (\n  index: number,\n  count: number,\n  typeOfSlide?: 'prev-cloned' | 'next-cloned'\n): number => {\n  if (typeOfSlide === 'prev-cloned') {\n    return index - count;\n  }\n\n  if (typeOfSlide === 'next-cloned') {\n    return index + count;\n  }\n\n  return index;\n};\n\nconst Slide = ({\n  count,\n  children,\n  index,\n  isCurrentSlide,\n  typeOfSlide,\n  wrapAround,\n  cellSpacing,\n  slideWidth,\n  animation,\n  speed,\n  zoomScale,\n  onVisibleSlideHeightChange,\n  adaptiveHeight,\n  initializedAdaptiveHeight,\n  updateIOEntry,\n  id,\n  carouselRef,\n}: {\n  count: number;\n  id: string;\n  children: ReactNode | ReactNode[];\n  index: number;\n  isCurrentSlide: boolean;\n  typeOfSlide: 'prev-cloned' | 'next-cloned' | undefined;\n  wrapAround: boolean;\n  cellSpacing: number;\n  animation: 'zoom' | 'fade' | undefined;\n  speed: number;\n  zoomScale: number | undefined;\n  slideWidth?: CSSProperties['width'];\n  updateIOEntry: (id: string, isFullyVisible: boolean) => void;\n  carouselRef: RefObject<Element>;\n  /**\n   * Called with `height` when slide becomes visible and `null` when it becomes\n   * hidden.\n   */\n  onVisibleSlideHeightChange: (index: number, height: number | null) => unknown;\n  adaptiveHeight: boolean;\n  initializedAdaptiveHeight: boolean;\n}): JSX.Element => {\n  const customIndex = wrapAround\n    ? generateIndex(index, count, typeOfSlide)\n    : index;\n\n  const slideRef = useRef<HTMLDivElement>(null);\n\n  const entry = useSlideIntersectionObserver(slideRef, carouselRef, (entry) => {\n    updateIOEntry(id, entry?.intersectionRatio >= 0.95);\n  });\n\n  const isVisible = !!entry?.isIntersecting;\n  const isFullyVisible = (entry?.intersectionRatio ?? 1) >= 0.95;\n\n  const prevIsVisibleRef = useRef(false);\n  useEffect(() => {\n    const node = slideRef.current;\n    if (node) {\n      const slideHeight = node.getBoundingClientRect()?.height;\n\n      const prevIsVisible = prevIsVisibleRef.current;\n      if (isVisible && !prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, slideHeight);\n      } else if (!isVisible && prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, null);\n      }\n\n      prevIsVisibleRef.current = isVisible;\n    }\n  }, [customIndex, isVisible, onVisibleSlideHeightChange]);\n\n  const currentSlideClass =\n    isCurrentSlide && isFullyVisible ? ' slide-current' : '';\n\n  return (\n    <div\n      ref={slideRef}\n      {...{ inert: isFullyVisible ? undefined : 'true' }}\n      className={`slide${currentSlideClass}${\n        typeOfSlide ? ` ${typeOfSlide}` : ''\n      }${isFullyVisible ? ' slide-visible' : ''}`}\n      style={getSlideStyles(\n        count,\n        isCurrentSlide,\n        isFullyVisible,\n        wrapAround,\n        cellSpacing,\n        animation,\n        speed,\n        zoomScale,\n        adaptiveHeight,\n        initializedAdaptiveHeight,\n        slideWidth\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Slide;\n","import { RefObject, useEffect, useRef, useState } from 'react';\n\nexport const useSlideIntersectionObserver = (\n  elementRef: RefObject<Element>,\n  rootRef: RefObject<Element>,\n  callback: (entry: IntersectionObserverEntry) => void\n) => {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const node = elementRef?.current;\n    const root = rootRef?.current;\n\n    if (!window.IntersectionObserver || !node || !root) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          setEntry(entry);\n          callbackRef.current(entry);\n        });\n      },\n      {\n        threshold: [0.05, 0.95],\n        root,\n      }\n    );\n\n    observer.observe(node);\n\n    return () => observer.disconnect();\n  }, [elementRef, rootRef]);\n\n  return entry;\n};\n","import React, { AriaAttributes, CSSProperties } from 'react';\n\nconst styles: CSSProperties = {\n  position: 'absolute',\n  width: '1px',\n  height: '1px',\n  overflow: 'hidden',\n  padding: 0,\n  margin: '-1px',\n  clip: 'rect(0, 0, 0, 0)',\n  whiteSpace: 'nowrap',\n  border: 0,\n};\n\nconst AnnounceSlide = ({\n  message,\n  ariaLive = 'polite',\n}: {\n  message: string;\n  ariaLive: AriaAttributes['aria-live'];\n}): React.ReactElement => (\n  <div aria-live={ariaLive} aria-atomic=\"true\" style={styles} tabIndex={-1}>\n    {message}\n  </div>\n);\n\nexport const defaultRenderAnnounceSlideMessage = ({\n  currentSlide,\n  count,\n}: {\n  currentSlide: number;\n  count: number;\n}): string => `Slide ${currentSlide + 1} of ${count}`;\n\nexport default AnnounceSlide;\n","import React, { ReactNode, useEffect } from 'react';\nimport { getDotIndexes } from './default-controls';\nimport { useTween } from './hooks/use-tween';\nimport { CellAlign, InternalCarouselProps } from './types';\n\nexport const getPercentOffsetForSlide = (\n  currentSlide: number,\n  slideCount: number,\n  slidesToShow: number,\n  cellAlign: CellAlign,\n  wrapAround: boolean\n): number => {\n  // When wrapAround is enabled, we show the slides 3 times\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n\n  const singleSlidePercentOfWhole = 100 / renderedSlideCount;\n\n  // When wrap is on, -33.33% puts us right on the center, true set of slides\n  // (the left and right sets are clones meant to avoid visual gaps)\n  let slide0Offset = wrapAround ? -100 / 3 : 0;\n\n  if (cellAlign === 'right' && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    slide0Offset += singleSlidePercentOfWhole * excessSlides;\n  }\n\n  if (cellAlign === 'center' && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    // Half of excess is on left and half is on right when centered\n    const excessLeftSlides = excessSlides / 2;\n    slide0Offset += singleSlidePercentOfWhole * excessLeftSlides;\n  }\n\n  const currentSlideOffsetFrom0 = (100 / renderedSlideCount) * currentSlide;\n\n  return slide0Offset - currentSlideOffsetFrom0;\n};\n\ninterface SliderListProps\n  extends Pick<\n    InternalCarouselProps,\n    | 'cellAlign'\n    | 'disableAnimation'\n    | 'disableEdgeSwiping'\n    | 'easing'\n    | 'edgeEasing'\n    | 'scrollMode'\n    | 'animation'\n    | 'slidesToShow'\n    | 'slideWidth'\n    | 'speed'\n    | 'wrapAround'\n  > {\n  slidesToScroll: number;\n  animationDistance: number;\n  children: ReactNode;\n  currentSlide: number;\n  draggedOffset: number;\n  isDragging: boolean;\n  slideCount: number;\n  setIsAnimating: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const SliderList = React.forwardRef<HTMLDivElement, SliderListProps>(\n  (\n    {\n      animation,\n      animationDistance,\n      cellAlign,\n      children,\n      currentSlide,\n      disableAnimation,\n      disableEdgeSwiping,\n      draggedOffset,\n      easing,\n      edgeEasing,\n      isDragging,\n      scrollMode,\n      slideCount,\n      slidesToScroll,\n      slidesToShow,\n      speed,\n      wrapAround,\n      slideWidth,\n      setIsAnimating,\n    },\n    forwardedRef\n  ) => {\n    // When wrapAround is enabled, we show the slides 3 times\n    const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n\n    const listVisibleWidth = slideWidth\n      ? `calc(${slideWidth} * ${renderedSlideCount})`\n      : `${(renderedSlideCount * 100) / slidesToShow}%`;\n\n    const percentOffsetForSlideProps = [\n      slideCount,\n      slidesToShow,\n      cellAlign,\n      wrapAround,\n    ] as const;\n\n    // We recycle dot index generation to determine the leftmost and rightmost\n    // indices used, to be used in calculating the x-translation values we need\n    // to limit to or when edgeEasing should be used.\n    const dotIndexes = getDotIndexes(\n      slideCount,\n      slidesToScroll,\n      scrollMode,\n      slidesToShow,\n      wrapAround,\n      cellAlign\n    );\n\n    let clampedDraggedOffset = `${draggedOffset}px`;\n    if (isDragging && disableEdgeSwiping && !wrapAround) {\n      const clampOffsets = [\n        dotIndexes[0],\n        dotIndexes[dotIndexes.length - 1],\n      ].map((index) =>\n        getPercentOffsetForSlide(index, ...percentOffsetForSlideProps)\n      );\n      // Offsets are seemingly backwards because the rightmost slide creates\n      // the most negative translate value\n      clampedDraggedOffset = `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)`;\n    }\n\n    const slideBasedOffset = getPercentOffsetForSlide(\n      currentSlide,\n      ...percentOffsetForSlideProps\n    );\n\n    const isEdgeEasing =\n      !disableEdgeSwiping &&\n      !wrapAround &&\n      ((currentSlide === dotIndexes[0] && animationDistance < 0) ||\n        (currentSlide === dotIndexes[dotIndexes.length - 1] &&\n          animationDistance > 0));\n    const { value: transition, isAnimating } = useTween(\n      speed,\n      !isEdgeEasing ? easing : edgeEasing,\n      // animationDistance is assumed to be unique enough that it can be used to\n      // detect when a new animation should start. This is used in addition to\n      // currentSlide because some animations, such as those with edgeEasing, do\n      // not occur due to a change in value of currentSlide\n      currentSlide + animationDistance,\n      isDragging || disableAnimation || animation === 'fade'\n    );\n\n    // Return undefined if the transform would be 0 pixels since transforms can\n    // cause flickering in chrome.\n    let positioning: string | undefined;\n    if (isDragging || slideBasedOffset !== 0 || isAnimating) {\n      if (isDragging) {\n        positioning = `translateX(${clampedDraggedOffset})`;\n      } else {\n        const transitionOffset = isAnimating\n          ? (1 - transition) * animationDistance\n          : 0;\n        positioning = `translateX(calc(${slideBasedOffset}% - ${transitionOffset}px))`;\n      }\n    }\n\n    useEffect(() => {\n      setIsAnimating(isAnimating);\n    }, [isAnimating, setIsAnimating]);\n\n    return (\n      <div\n        ref={forwardedRef}\n        className=\"slider-list\"\n        style={{\n          width: listVisibleWidth,\n          textAlign: 'left',\n          userSelect: 'auto',\n          transform: positioning,\n          display: 'flex',\n        }}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nSliderList.displayName = 'SliderList';\n","import React, { CSSProperties, useCallback } from 'react';\nimport { CellAlign, ControlProps, ScrollMode } from './types';\nimport { getBoundedIndex } from './utils';\n\nconst defaultButtonStyles = (disabled: boolean): CSSProperties => ({\n  border: 0,\n  background: 'rgba(0,0,0,0.4)',\n  color: 'white',\n  padding: 10,\n  textTransform: 'uppercase',\n  opacity: disabled ? 0.3 : 1,\n  cursor: disabled ? 'not-allowed' : 'pointer',\n});\n\nexport const prevButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slidesToShow,\n  wrapAround,\n}: Pick<\n  ControlProps,\n  'cellAlign' | 'currentSlide' | 'slidesToShow' | 'wrapAround'\n>) => {\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  }\n\n  // disable if displaying the leftmost slide\n  if (currentSlide === 0) {\n    return true;\n  }\n\n  // remainder scroll mode\n  if (cellAlign === 'right' && currentSlide <= slidesToShow - 1) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const PreviousButton = ({\n  previousSlide,\n  defaultControlsConfig: {\n    prevButtonClassName,\n    prevButtonStyle = {},\n    prevButtonText,\n    prevButtonOnClick,\n  },\n  onUserNavigation,\n  previousDisabled: disabled,\n}: ControlProps) => {\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    prevButtonOnClick?.(event);\n    if (event.defaultPrevented) return;\n\n    onUserNavigation(event);\n\n    event.preventDefault();\n    previousSlide();\n  };\n\n  return (\n    <button\n      className={prevButtonClassName}\n      style={{\n        ...defaultButtonStyles(disabled),\n        ...prevButtonStyle,\n      }}\n      disabled={disabled}\n      onClick={handleClick}\n      aria-label=\"previous\"\n      type=\"button\"\n    >\n      {prevButtonText || 'Prev'}\n    </button>\n  );\n};\n\nexport const nextButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slideCount,\n  slidesToShow,\n  wrapAround,\n}: Pick<\n  ControlProps,\n  'cellAlign' | 'currentSlide' | 'slideCount' | 'slidesToShow' | 'wrapAround'\n>) => {\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  }\n\n  // If we are at the last possible slide without wrap, disable\n  if (currentSlide >= slideCount - 1) {\n    return true;\n  }\n\n  // remainder scroll mode\n  if (cellAlign === 'left' && currentSlide >= slideCount - slidesToShow) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const NextButton = ({\n  nextSlide,\n  defaultControlsConfig: {\n    nextButtonClassName,\n    nextButtonStyle = {},\n    nextButtonText,\n    nextButtonOnClick,\n  },\n  nextDisabled: disabled,\n  onUserNavigation,\n}: ControlProps) => {\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    nextButtonOnClick?.(event);\n    if (event.defaultPrevented) return;\n\n    onUserNavigation(event);\n\n    event.preventDefault();\n    nextSlide();\n  };\n\n  return (\n    <button\n      className={nextButtonClassName}\n      style={{\n        ...defaultButtonStyles(disabled),\n        ...nextButtonStyle,\n      }}\n      disabled={disabled}\n      onClick={handleClick}\n      aria-label=\"next\"\n      type=\"button\"\n    >\n      {nextButtonText || 'Next'}\n    </button>\n  );\n};\n\n/**\n * Calculate the indices that each dot will jump to when clicked\n */\nexport const getDotIndexes = (\n  slideCount: number,\n  slidesToScroll: number,\n  scrollMode: ScrollMode,\n  slidesToShow: number,\n  wrapAround: boolean,\n  cellAlign: CellAlign\n) => {\n  const dotIndexes: number[] = [];\n  const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n\n  if (wrapAround) {\n    for (let i = 0; i < slideCount; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'center') {\n    for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (slideCount > 0) {\n      dotIndexes.push(slideCount - 1);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'left') {\n    if (slidesToShow >= slideCount) {\n      return [0];\n    }\n\n    const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n\n    for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (scrollMode === ScrollMode.remainder) {\n      dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n    } else {\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'right') {\n    if (slidesToShow >= slideCount) {\n      return [slideCount - 1];\n    }\n\n    const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n\n    if (scrollMode === ScrollMode.remainder) {\n      for (\n        let i = firstPossibleIndexWithoutWhitespace;\n        i < slideCount - 1;\n        i += scrollSlides\n      ) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(slideCount - 1);\n    } else {\n      for (\n        let i = slideCount - 1;\n        i > firstPossibleIndexWithoutWhitespace;\n        i -= scrollSlides\n      ) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n\n      dotIndexes.reverse();\n    }\n\n    return dotIndexes;\n  }\n\n  // We should never reach this, because the if statements above cover all\n  // possible values of cellAlign\n  return dotIndexes;\n};\n\nexport const PagingDots = ({\n  pagingDotsIndices,\n  defaultControlsConfig: {\n    pagingDotsContainerClassName,\n    pagingDotsClassName,\n    pagingDotsStyle = {},\n    pagingDotsOnClick,\n  },\n  currentSlide,\n  onUserNavigation,\n  slideCount,\n  goToSlide,\n}: ControlProps) => {\n  const listStyles: CSSProperties = {\n    position: 'relative',\n    top: -10,\n    display: 'flex',\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none',\n  };\n\n  const getButtonStyles = useCallback(\n    (active: boolean) => ({\n      cursor: 'pointer',\n      opacity: active ? 1 : 0.5,\n      background: 'transparent',\n      border: 'none',\n      fill: 'black',\n    }),\n    []\n  );\n  const currentSlideBounded = getBoundedIndex(currentSlide, slideCount);\n\n  return (\n    <ul className={pagingDotsContainerClassName} style={listStyles}>\n      {pagingDotsIndices.map((slideIndex, i) => {\n        const isActive =\n          currentSlideBounded === slideIndex ||\n          // sets navigation dots active if the current slide falls in the current index range\n          (currentSlideBounded < slideIndex &&\n            (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]));\n\n        return (\n          <li\n            key={slideIndex}\n            className={isActive ? 'paging-item active' : 'paging-item'}\n          >\n            <button\n              className={pagingDotsClassName}\n              type=\"button\"\n              style={{\n                ...getButtonStyles(isActive),\n                ...pagingDotsStyle,\n              }}\n              onClick={(event) => {\n                pagingDotsOnClick?.(event);\n                if (event.defaultPrevented) return;\n\n                onUserNavigation(event);\n\n                goToSlide(slideIndex);\n              }}\n              aria-label={`slide ${slideIndex + 1} bullet`}\n              aria-selected={isActive}\n            >\n              <svg\n                className=\"paging-dot\"\n                width=\"6\"\n                height=\"6\"\n                aria-hidden=\"true\"\n                focusable=\"false\"\n                viewBox=\"0 0 6 6\"\n              >\n                <circle cx=\"3\" cy=\"3\" r=\"3\" />\n              </svg>\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import { ReactNode, CSSProperties } from 'react';\n\nexport type CellAlign = 'center' | 'right' | 'left';\n\n/** @deprecated use string literals for the values instead */\nexport enum Alignment {\n  Center = 'center',\n  Right = 'right',\n  Left = 'left',\n}\n\nexport enum Directions {\n  Next = 'next',\n  Prev = 'prev',\n  Up = 'up',\n  Down = 'down',\n}\n\nexport enum Positions {\n  TopLeft = 'TopLeft',\n  TopCenter = 'TopCenter',\n  TopRight = 'TopRight',\n  CenterLeft = 'CenterLeft',\n  CenterCenter = 'CenterCenter',\n  CenterRight = 'CenterRight',\n  BottomLeft = 'BottomLeft',\n  BottomCenter = 'BottomCenter',\n  BottomRight = 'BottomRight',\n}\n\ntype SlideChildren = {\n  offsetHeight: number;\n};\n\nexport type SlideHeight = {\n  height: number;\n  slideIndex: number;\n};\n\nexport interface Slide {\n  children?: [SlideChildren];\n  offsetHeight: number;\n}\n\nexport enum ScrollMode {\n  page = 'page',\n  remainder = 'remainder',\n}\n\ninterface DefaultControlsConfig {\n  containerClassName?: string;\n  nextButtonClassName?: string;\n  nextButtonOnClick?: React.MouseEventHandler;\n  nextButtonStyle?: CSSProperties;\n  nextButtonText?: ReactNode;\n  pagingDotsClassName?: string;\n  pagingDotsContainerClassName?: string;\n  pagingDotsOnClick?: React.MouseEventHandler;\n  pagingDotsStyle?: CSSProperties;\n  prevButtonClassName?: string;\n  prevButtonOnClick?: React.MouseEventHandler;\n  prevButtonStyle?: CSSProperties;\n  prevButtonText?: ReactNode;\n}\n\nexport interface KeyCodeConfig {\n  firstSlide?: number[];\n  lastSlide?: number[];\n  nextSlide?: number[];\n  pause?: number[];\n  previousSlide?: number[];\n}\n\nexport type KeyCodeFunction =\n  | 'nextSlide'\n  | 'previousSlide'\n  | 'firstSlide'\n  | 'lastSlide'\n  | 'pause'\n  | null;\n\nexport interface KeyCodeMap {\n  [key: number]: keyof KeyCodeConfig;\n}\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/** @deprecated This is not actually used for anything */\nexport interface CarouselState {}\n/* eslint-enable @typescript-eslint/no-empty-interface */\n\ntype RenderAnnounceSlideMessage = (props: {\n  currentSlide: number;\n  count: number;\n}) => string;\n\nexport interface ControlProps\n  extends Pick<\n    InternalCarouselProps,\n    | 'cellAlign'\n    | 'cellSpacing'\n    | 'defaultControlsConfig'\n    | 'onUserNavigation'\n    | 'scrollMode'\n    | 'slidesToScroll'\n    | 'slidesToShow'\n    | 'vertical'\n    | 'wrapAround'\n  > {\n  /**\n   * Current slide index\n   */\n  currentSlide: number;\n\n  /**\n   * The indices for the paging dots\n   */\n  pagingDotsIndices: number[];\n\n  /**\n   * Go to a specific slide\n   * @param targetIndex Index to go to\n   */\n  goToSlide: (targetIndex: number) => void;\n\n  /**\n   * Whether the \"next\" button should be disabled or not\n   */\n  nextDisabled: boolean;\n\n  /**\n   * Go to the next slide\n   */\n  nextSlide: () => void;\n\n  /**\n   * Whether the \"previous\" button should be disabled or not\n   */\n  previousDisabled: boolean;\n\n  /**\n   * Go to the previous slide\n   */\n  previousSlide: () => void;\n\n  /**\n   * Total number of slides\n   */\n  slideCount: number;\n}\n\nexport type RenderControlFunctionNames =\n  | 'renderTopLeftControls'\n  | 'renderTopCenterControls'\n  | 'renderTopRightControls'\n  | 'renderCenterLeftControls'\n  | 'renderCenterCenterControls'\n  | 'renderCenterRightControls'\n  | 'renderBottomLeftControls'\n  | 'renderBottomCenterControls'\n  | 'renderBottomRightControls';\n\n/**\n * A function to override what to render on an edge/corner of the modal.\n *\n * Pass in null to not render the default controls on an edge.\n */\ntype RenderControls = ((props: ControlProps) => ReactNode) | null;\n\n/**\n * Animation easing function accepting a normalized time between 0 and 1,\n * inclusive, and returning an eased time, which equals 0 at normalizedTime==0\n * and equals 1 at normalizedTime==1\n */\nexport type EasingFunction = (normalizedTime: number) => number;\n\nexport interface InternalCarouselProps {\n  /**\n   * If it's set to true, the carousel will adapt its height to the visible slides.\n   */\n  adaptiveHeight: boolean;\n\n  /**\n   * Whether to smoothly transition the height of the frame when using\n   * `adaptiveHeight`.\n   * @default true\n   */\n  adaptiveHeightAnimation: boolean;\n\n  /**\n   * Hook to be called after a slide is changed\n   * @param index Index of the current slide\n   */\n  afterSlide: (index: number) => void;\n\n  /**\n   * Adds a zoom or fade effect on the currently visible slide.\n   */\n  animation?: 'zoom' | 'fade';\n\n  /**\n   * Autoplay mode active\n   * @default false\n   */\n  autoplay: boolean;\n\n  /**\n   * Interval for autoplay iteration (ms)\n   * @default 3000\n   */\n  autoplayInterval: number;\n\n  /**\n   * Autoplay cycles through slide indexes in reverse\n   * @default false\n   */\n  autoplayReverse: boolean;\n\n  /**\n   * Hook to be called before a slide is changed\n   * @param currentSlide Index of the current slide\n   * @param endSlide Index of the last slide\n   */\n  beforeSlide: (currentSlideIndex: number, endSlideIndex: number) => void;\n\n  /**\n   * When displaying more than one slide,\n   * sets which position to anchor the current slide to\n   */\n  cellAlign: CellAlign;\n\n  /**\n   * Space between slides, as an integer, but reflected as px\n   */\n  cellSpacing: number;\n\n  /**\n   * Explicit children prop to resolve issue with @types/react v18\n   */\n  children: ReactNode | ReactNode[];\n\n  /**\n   * Additional className\n   */\n  className?: string;\n\n  /**\n   * This prop lets you apply custom classes and styles to the default Next, Previous, and Paging Dots controls\n   */\n  defaultControlsConfig: DefaultControlsConfig;\n\n  /**\n   * Disable slides animation\n   * @default false\n   */\n  disableAnimation: boolean;\n\n  /**\n   * Disable swipe before first slide and after last slide\n   * @default false\n   */\n  disableEdgeSwiping: boolean;\n\n  /**\n   * Enable mouse swipe/dragging\n   */\n  dragging: boolean;\n\n  /**\n   * The percentage (from 0 to 1) of a slide that the user needs to drag before\n   * @default `0.5`\n   */\n  dragThreshold: number;\n\n  /**\n   * Animation easing function\n   */\n  easing: EasingFunction;\n\n  /**\n   * Animation easing function when swipe exceeds edge\n   */\n  edgeEasing: EasingFunction;\n\n  /**\n   * When set to true, disable keyboard controls\n   * @default false\n   */\n  enableKeyboardControls: boolean;\n\n  /**\n   * Customize the aria-label of the frame container of the carousel. This is useful when you have more than one carousel on the page.\n   */\n  frameAriaLabel?: string;\n\n  /**\n   * When enableKeyboardControls is enabled, Configure keyCodes for corresponding slide actions as array of keyCodes\n   */\n  keyCodeConfig: KeyCodeConfig;\n\n  /**\n   * optional callback function\n   */\n  onDragStart: (\n    e: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>\n  ) => void;\n\n  /**\n   * optional callback function\n   */\n  onDrag: (\n    e: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>\n  ) => void;\n\n  /**\n   * optional callback function\n   */\n  onDragEnd: (\n    e: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>\n  ) => void;\n\n  /**\n   * Callback called when user-triggered navigation occurs: dragging/swiping,\n   * clicking one of the controls (custom controls not included), or using a\n   * keyboard shortcut\n   */\n  onUserNavigation: (\n    e: React.TouchEvent | React.MouseEvent | React.KeyboardEvent\n  ) => void;\n\n  /**\n   * Pause autoPlay when mouse is over carousel\n   * @default true\n   */\n  pauseOnHover: boolean;\n\n  /**\n   * Function for rendering aria-live announcement messages\n   */\n  renderAnnounceSlideMessage: RenderAnnounceSlideMessage;\n\n  /**\n   * Function for rendering bottom center control\n   */\n  renderBottomCenterControls: RenderControls;\n\n  /**\n   * Function for rendering bottom left control\n   */\n  renderBottomLeftControls?: RenderControls;\n\n  /**\n   * Function for rendering bottom right control\n   */\n  renderBottomRightControls?: RenderControls;\n\n  /**\n   * Function for rendering center center control\n   */\n  renderCenterCenterControls?: RenderControls;\n\n  /**\n   * Function for rendering center left control\n   */\n  renderCenterLeftControls: RenderControls;\n\n  /**\n   * Function for rendering center right control\n   */\n  renderCenterRightControls: RenderControls;\n\n  /**\n   * Function for rendering top center control\n   */\n  renderTopCenterControls?: RenderControls;\n\n  /**\n   * Function for rendering top left control\n   */\n  renderTopLeftControls?: RenderControls;\n\n  /**\n   * Function for rendering top right control\n   */\n  renderTopRightControls?: RenderControls;\n\n  /**\n   * Supports 'page' and 'remainder' scroll modes.\n   */\n  scrollMode: ScrollMode;\n\n  /**\n   * Manually set the index of the initial slide to be shown\n   */\n  slideIndex?: number;\n\n  /**\n   * Slides to scroll at once.\n   */\n  slidesToScroll: number | 'auto';\n\n  /**\n   * Slides to show at once\n   */\n  slidesToShow: number;\n\n  /**\n   * Sets a fixed slide width\n   */\n  slideWidth?: CSSProperties['width'];\n\n  /**\n   * Animation duration\n   */\n  speed: number;\n\n  /**\n   * style object\n   */\n  style: CSSProperties;\n\n  /**\n   * Enable touch swipe/dragging\n   */\n  swiping: boolean;\n\n  /**\n   * Not migrated yet\n   *\n   * Enable the slides to transition vertically\n   */\n  vertical: boolean;\n\n  /**\n   * Used to remove all controls at once. Overwrites the render[Top, Right, Bottom, Left]CenterControls()\n   * @default false\n   */\n  withoutControls: boolean;\n\n  /**\n   * Sets infinite wrapAround mode\n   * @default false\n   */\n  wrapAround: boolean;\n\n  /**\n   * Adds a number value to set the scale of zoom when animation === \"zoom\".\n   * The number value should be set in a range of (0,1).\n   * @default 0.85\n   */\n  zoomScale?: number;\n}\n\n/**\n * This component has no required props.\n */\nexport type CarouselProps = Partial<InternalCarouselProps>;\n","import { getDotIndexes } from './default-controls';\nimport { CellAlign, ScrollMode } from './types';\n\nexport const getNextMoveIndex = (\n  scrollMode: ScrollMode,\n  wrapAround: boolean,\n  currentSlide: number,\n  slideCount: number,\n  slidesToScroll: number,\n  slidesToShow: number,\n  cellAlign: CellAlign\n) => {\n  if (wrapAround) {\n    return currentSlide + slidesToScroll;\n  }\n  // Quit early if we're already as far right as we can go\n  if (\n    currentSlide >= slideCount - 1 ||\n    (cellAlign === 'left' && currentSlide >= slideCount - slidesToShow)\n  ) {\n    return currentSlide;\n  }\n\n  if (scrollMode === ScrollMode.remainder && cellAlign === 'left') {\n    return Math.min(currentSlide + slidesToScroll, slideCount - slidesToShow);\n  }\n\n  return Math.min(currentSlide + slidesToScroll, slideCount - 1);\n};\n\nexport const getPrevMoveIndex = (\n  scrollMode: ScrollMode,\n  wrapAround: boolean,\n  currentSlide: number,\n  slidesToScroll: number,\n  slidesToShow: number,\n  cellAlign: CellAlign\n) => {\n  if (wrapAround) {\n    return currentSlide - slidesToScroll;\n  }\n\n  // Quit early if we're already as far left as we can go\n  if (\n    currentSlide <= 0 ||\n    (cellAlign === 'right' && currentSlide <= slidesToShow - 1)\n  ) {\n    return currentSlide;\n  }\n\n  if (scrollMode === ScrollMode.remainder && cellAlign === 'right') {\n    return Math.max(currentSlide - slidesToScroll, slidesToShow - 1);\n  }\n\n  return Math.max(currentSlide - slidesToScroll, 0);\n};\n\nexport const getDefaultSlideIndex = (\n  slideIndex: number | undefined,\n  slideCount: number,\n  slidesToShow: number,\n  slidesToScroll: number,\n  cellAlign: CellAlign,\n  autoplayReverse: boolean,\n  scrollMode: ScrollMode\n) => {\n  if (slideIndex !== undefined) {\n    return slideIndex;\n  }\n\n  const dotIndexes = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    scrollMode,\n    slidesToShow,\n    false,\n    cellAlign\n  );\n\n  return autoplayReverse ? dotIndexes[dotIndexes.length - 1] : dotIndexes[0];\n};\n\n/**\n * Boils down an unbounded index (-Infinity < index < Infinity) to a bounded one\n * (0 ≤ index < slideCount)\n */\nexport const getBoundedIndex = (rawIndex: number, slideCount: number) => {\n  return ((rawIndex % slideCount) + slideCount) % slideCount;\n};\n","import { useEffect, useState, useRef } from 'react';\nimport { EasingFunction } from 'src/types';\n\n/**\n * Provides an interpolated value, beginning at 0 and ending at 1, based on a\n * provided duration and animation timing function.\n */\nexport const useTween = (\n  durationMs: number,\n  easingFunction: EasingFunction,\n  // navigationNum is an combination of numbers that are stable when the\n  // animation should not be running or should continue running, but change when\n  // the animation should start running. In practice, this is a combination of\n  // the animation distance and slide index.\n  navigationNum: number,\n  shouldInterrupt: boolean\n) => {\n  const [normalizedTimeRaw, setNormalizedTime] = useState(1);\n  const startTime = useRef(Date.now());\n  const rAF = useRef<number | undefined>();\n  const isFirstRender = useRef(true);\n  const lastNavigationNum = useRef<number | null>(null);\n\n  // Detect on the first render following navigation if the animation should\n  // be running. If we wait for the useEffect, the first render will flash with\n  // the slide in its destination position, before the animation triggers,\n  // sending it back to the position of the first frame of the animation. This\n  // approach is done in place of a useLayoutEffect, which has issues with SSR.\n  const normalizedTime =\n    lastNavigationNum.current === null ||\n    lastNavigationNum.current === navigationNum ||\n    shouldInterrupt\n      ? normalizedTimeRaw\n      : 0; // 0 here indicates the animation has begun\n\n  useEffect(() => {\n    lastNavigationNum.current = navigationNum;\n\n    // Skip the first render as we don't want to trigger the animation right off\n    // the bat\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    if (shouldInterrupt) {\n      return;\n    }\n\n    startTime.current = Date.now();\n    setNormalizedTime(0);\n\n    const tick = () => {\n      rAF.current = requestAnimationFrame(() => {\n        const currentTime = Date.now();\n        const normalizedTime = Math.min(\n          1,\n          (currentTime - startTime.current) / durationMs\n        );\n        setNormalizedTime(normalizedTime);\n\n        if (normalizedTime < 1) {\n          tick();\n        } else {\n          // Clean up so we can use this value to determine if the most recent\n          // animation completed\n          rAF.current = undefined;\n        }\n      });\n    };\n    tick();\n\n    return () => {\n      // If the most recent animation did not complete, cut it short and reset\n      // the animation\n      if (rAF.current !== undefined) {\n        cancelAnimationFrame(rAF.current);\n        setNormalizedTime(1);\n      }\n    };\n  }, [navigationNum, durationMs, shouldInterrupt]);\n\n  return {\n    isAnimating: normalizedTime !== 1,\n    value: easingFunction(normalizedTime),\n  };\n};\n","import React, { Fragment } from 'react';\nimport { getControlContainerStyles } from './control-styles';\nimport {\n  getDotIndexes,\n  nextButtonDisabled,\n  prevButtonDisabled,\n} from './default-controls';\nimport {\n  InternalCarouselProps,\n  Positions,\n  RenderControlFunctionNames,\n} from './types';\n\ntype ControlMap = { funcName: RenderControlFunctionNames; key: Positions }[];\nconst controlsMap: ControlMap = [\n  { funcName: 'renderTopLeftControls', key: Positions.TopLeft },\n  { funcName: 'renderTopCenterControls', key: Positions.TopCenter },\n  { funcName: 'renderTopRightControls', key: Positions.TopRight },\n  { funcName: 'renderCenterLeftControls', key: Positions.CenterLeft },\n  { funcName: 'renderCenterCenterControls', key: Positions.CenterCenter },\n  { funcName: 'renderCenterRightControls', key: Positions.CenterRight },\n  { funcName: 'renderBottomLeftControls', key: Positions.BottomLeft },\n  { funcName: 'renderBottomCenterControls', key: Positions.BottomCenter },\n  { funcName: 'renderBottomRightControls', key: Positions.BottomRight },\n];\n\nconst renderControls = (\n  props: InternalCarouselProps,\n  slideCount: number,\n  currentSlide: number,\n  goToSlide: (targetSlideIndex: number) => void,\n  nextSlide: () => void,\n  prevSlide: () => void,\n  slidesToScroll: number\n): React.ReactElement[] | null => {\n  if (props.withoutControls) {\n    return null;\n  }\n\n  const disableCheckProps = {\n    ...props,\n    currentSlide,\n    slideCount,\n  };\n  const nextDisabled = nextButtonDisabled(disableCheckProps);\n  const previousDisabled = prevButtonDisabled(disableCheckProps);\n  const pagingDotsIndices = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    props.scrollMode,\n    props.slidesToShow,\n    props.wrapAround,\n    props.cellAlign\n  );\n\n  return controlsMap.map((control) => {\n    if (\n      !props[control.funcName] ||\n      typeof props[control.funcName] !== 'function'\n    ) {\n      return <Fragment key={control.funcName} />;\n    }\n    return (\n      <div\n        key={control.funcName}\n        style={{\n          ...getControlContainerStyles(control.key),\n          pointerEvents: 'none',\n        }}\n      >\n        <div\n          className={[\n            `slider-control-${control.key.toLowerCase()}`,\n            props.defaultControlsConfig.containerClassName || '',\n          ]\n            .join(' ')\n            .trim()}\n          // The container has `pointerEvents: 'none'` so we need to override\n          // that to make sure the controls are clickable.\n          style={{ pointerEvents: 'auto' }}\n        >\n          {props[control.funcName]?.({\n            cellAlign: props.cellAlign,\n            cellSpacing: props.cellSpacing,\n            currentSlide,\n            defaultControlsConfig: props.defaultControlsConfig || {},\n            pagingDotsIndices,\n            goToSlide,\n            nextDisabled,\n            nextSlide,\n            onUserNavigation: props.onUserNavigation,\n            previousDisabled,\n            previousSlide: prevSlide,\n            scrollMode: props.scrollMode,\n            slideCount,\n            slidesToScroll,\n            slidesToShow: props.slidesToShow || 1,\n            vertical: props.vertical,\n            wrapAround: props.wrapAround,\n          })}\n        </div>\n      </div>\n    );\n  });\n};\n\nexport default renderControls;\n","import { CSSProperties } from 'react';\nimport { Positions } from './types';\n\nconst commonStyles: CSSProperties = {\n  position: 'absolute',\n  display: 'flex',\n  zIndex: 1,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\n/**\n * Gets flexbox alignment and justify-content styles for a given position.\n */\nconst getControlContainerFlexStyles = (pos: Positions): CSSProperties => {\n  let alignItems: CSSProperties['alignItems'];\n\n  switch (pos) {\n    case Positions.TopLeft:\n    case Positions.TopCenter:\n    case Positions.TopRight:\n      alignItems = 'flex-start';\n      break;\n    case Positions.CenterLeft:\n    case Positions.CenterCenter:\n    case Positions.CenterRight:\n      alignItems = 'center';\n      break;\n    case Positions.BottomLeft:\n    case Positions.BottomCenter:\n    case Positions.BottomRight:\n      alignItems = 'flex-end';\n      break;\n  }\n\n  let justifyContent: CSSProperties['justifyContent'];\n  switch (pos) {\n    case Positions.TopLeft:\n    case Positions.CenterLeft:\n    case Positions.BottomLeft:\n      justifyContent = 'flex-start';\n      break;\n    case Positions.TopCenter:\n    case Positions.CenterCenter:\n    case Positions.BottomCenter:\n      justifyContent = 'center';\n      break;\n    case Positions.TopRight:\n    case Positions.CenterRight:\n    case Positions.BottomRight:\n      justifyContent = 'flex-end';\n      break;\n  }\n\n  return { alignItems, justifyContent };\n};\n\n/**\n * Gets the styles for a back/forward control container to align the control\n * properly within the parent.\n */\nexport const getControlContainerStyles = (pos: Positions): CSSProperties => {\n  return { ...getControlContainerFlexStyles(pos), ...commonStyles };\n};\n","import React from 'react';\nimport { InternalCarouselProps, ControlProps, ScrollMode } from './types';\nimport { NextButton, PagingDots, PreviousButton } from './default-controls';\nimport { defaultRenderAnnounceSlideMessage } from './announce-slide';\n\nconst easeOut = (t: number) => (t - 1) ** 3 + 1;\n\nconst defaultProps: InternalCarouselProps = {\n  adaptiveHeight: false,\n  adaptiveHeightAnimation: true,\n  afterSlide: () => {\n    // do nothing\n  },\n  autoplay: false,\n  autoplayInterval: 3000,\n  autoplayReverse: false,\n  beforeSlide: () => {\n    // do nothing\n  },\n  cellAlign: 'left',\n  cellSpacing: 0,\n  defaultControlsConfig: {},\n  disableAnimation: false,\n  disableEdgeSwiping: false,\n  dragging: true,\n  dragThreshold: 0.5,\n  easing: easeOut,\n  edgeEasing: easeOut,\n  enableKeyboardControls: false,\n  frameAriaLabel: 'carousel-slider',\n  keyCodeConfig: {\n    nextSlide: [39, 68, 38, 87],\n    previousSlide: [37, 65, 40, 83],\n    firstSlide: [81],\n    lastSlide: [69],\n    pause: [32],\n  },\n  onDragStart: () => {\n    // do nothing\n  },\n  onDrag: () => {\n    // do nothing\n  },\n  onDragEnd: () => {\n    // do nothing\n  },\n  onUserNavigation: () => {\n    // do nothing\n  },\n  pauseOnHover: true,\n  renderAnnounceSlideMessage: defaultRenderAnnounceSlideMessage,\n  renderBottomCenterControls: (props: ControlProps) => (\n    <PagingDots {...props} />\n  ),\n  renderCenterLeftControls: (props: ControlProps) => (\n    <PreviousButton {...props} />\n  ),\n  renderCenterRightControls: (props: ControlProps) => <NextButton {...props} />,\n  scrollMode: ScrollMode.page,\n  slidesToScroll: 1,\n  slidesToShow: 1,\n  speed: 500,\n  style: {},\n  swiping: true,\n  vertical: false,\n  withoutControls: false,\n  wrapAround: false,\n  children: <></>,\n};\n\nexport default defaultProps;\n","import { SlideHeight } from '../types';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useStateWithRef } from './use-state-with-ref';\n\n/**\n * The frame height is normally, just `auto` (i.e., it expands to fit the\n * items), but in adaptiveHeight mode, it's the height of the tallest visible\n * item.\n *\n * In adaptiveHeight mode, we also switch between two states to ensure that\n * slides don't render with zero height when server-side-rendering:\n *\n * - When initializedAdaptiveHeight is false: the frame has height auto; visible\n *   slides have height auto; invisible slides have height 0\n * - The client sets initializedAdaptiveHeight to true once we've measured all\n *   the visible slides' heights\n * - When initializedAdaptiveHeight is true: the frame has height set to the\n *   tallest visible slide; all slides have height 100%\n */\nexport const useFrameHeight = (\n  adaptiveHeight: boolean,\n  slidesToShow: number,\n  slideCount: number\n): {\n  /**\n   * Callback that can be passed to Slides to allow them to update the\n   * `visibleHeights` variable.\n   */\n  handleVisibleSlideHeightChange: (\n    slideIndex: number,\n    height: number | null\n  ) => unknown;\n\n  /** CSS height of the frame container */\n  frameHeight: string;\n\n  /**\n   * Whether we'd measured the initial slide heights and are ready for the\n   * frame to control the children's height, rather than the other way around.\n   */\n  initializedAdaptiveHeight: boolean;\n} => {\n  const [visibleHeights, setVisibleHeights, visibleHeightsRef] =\n    useStateWithRef<SlideHeight[]>([]);\n\n  // Whether we've received heights of all initial visible heights\n  const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] =\n    useState(false);\n\n  const handleVisibleSlideHeightChange = useCallback(\n    (slideIndex: number, height: number | null) => {\n      // Use the ref's value since it's always the latest value\n      const latestVisibleHeights = visibleHeightsRef.current;\n      let newVisibleHeights: SlideHeight[];\n      if (height === null) {\n        newVisibleHeights = latestVisibleHeights.filter(\n          (slideHeight) => slideHeight.slideIndex !== slideIndex\n        );\n      } else {\n        newVisibleHeights = [...latestVisibleHeights, { slideIndex, height }];\n      }\n      setVisibleHeights(newVisibleHeights);\n\n      if (\n        newVisibleHeights.length >=\n        Math.min(slideCount, Math.ceil(slidesToShow))\n      ) {\n        setInitializedAdaptiveHeight(true);\n      }\n    },\n    [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]\n  );\n\n  const frameHeight = useMemo(() => {\n    if (adaptiveHeight) {\n      // We want server-side-rendering to render the carousel with non-zero\n      // height. to achieve this, we first set the height to `auto` until\n      // we've received the heights of the visible slides. Then, we switch to\n      // a mode where the frame controls the height.\n      if (!initializedAdaptiveHeight) {\n        return 'auto';\n      }\n\n      const maxHeight = Math.max(\n        0,\n        ...visibleHeights.map((height) => height.height)\n      );\n      return `${maxHeight}px`;\n    } else {\n      return 'auto';\n    }\n  }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n\n  return {\n    handleVisibleSlideHeightChange,\n    frameHeight,\n    initializedAdaptiveHeight,\n  };\n};\n","import { MutableRefObject, useCallback, useRef, useState } from 'react';\n\n/**\n * Like useState, but also returns a ref that's always instantly updated.\n *\n * This is useful in two cases:\n *\n * 1. You need to both force a re-render when a variable changes, and\n *    also avoid re-running side effects (for example, a network call), even\n *    before the state fully updates for the component.\n * 2. Multiple callbacks need to modify the same object or array before the\n *    state updates. For example, if one callback tries to append 4 to\n *    `[1, 2, 3]` and another tries to append 5, we may end up with only\n *    `[1, 2, 3, 5]` instead of `[1, 2, 3, 4, 5]`\n */\nexport const useStateWithRef = <S>(\n  initialState: S\n): [S, (newValue: S) => void, MutableRefObject<S>] => {\n  const [value, setValue] = useState(initialState);\n  // Need to explicitly type this out, or the overloads can confuse the\n  // compiler to think that this might be a React Component ref\n  const valueRef = useRef<S>(initialState) as MutableRefObject<S>;\n\n  const setValueAndRef = useCallback((newValue: S) => {\n    valueRef.current = newValue;\n    setValue(newValue);\n  }, []);\n\n  return [value, setValueAndRef, valueRef];\n};\n","import { useEffect, useRef, ForwardedRef } from 'react';\n\nexport const useForwardRef = <T>(ref: ForwardedRef<T>) => {\n  const targetRef = useRef<T>(null);\n\n  useEffect(() => {\n    if (!ref) return;\n\n    if (typeof ref === 'function') {\n      ref(targetRef.current);\n    } else {\n      ref.current = targetRef.current;\n    }\n  }, [ref]);\n\n  return targetRef;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}